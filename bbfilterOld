#!/usr/bin/env perl
#
# Filters out interesting baseband data from the trace log and present it in a nice way. Useful for
# both post-processing log files and real-time tracing.
#
# Created by:
#   Henrik Ahlander, 2010-05-05, send ideas of improvements to henrik.ahlander@ericsson.com
#
# Updated by:
#   See clearcase history at /vobs/erbs/ext/tools/flexTools/bbfilter
#
# Based on ideas and other scripts from various persons. Abdirashid, Pekka, Wicky and others
#

use strict;

$| = 1;  # no buffering

my $versionNumber = "2.27";
my @arguments;
my @argumentUsed;
my %settings;

my ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime, $signalName, $structName, $signalData);
my %value;
my %saved;
my $lastBfnTime = -1;
my @receivedSignals;
my $counter = 0;
my $subframeWindowStart = -100;
my $subframeWindowEnd = -100;
my $subframeWindowStartBefore = 7;
my $subframeWindowSize = 14;
my %savedSubframesSfn;
my %savedSubframesSf;
my %savedSubframesCellId;
my %savedSubframesUeRef;
my $accumulatedSfn = 0;
my $decodePrintout = "";
my $ltng = 0;

my $rlcDirection = "";
my $rlcWindowSize = 50;
my @dlRlcFeedbackWindow;
my @ulRlcFeedbackWindow;
my $savedDlRlcAckNacksInWindow;
my $savedUlRlcAckNacksInWindow;
my $nrOfDlRlcErrorsInWindow;
my $nrOfUlRlcErrorsInWindow;

my $harqWindowSize = 100;
my %dlHarqFeedbackWindow;
my %ulHarqFeedbackWindow;
my %savedDlHarqAckNacksInWindow;
my %savedUlHarqAckNacksInWindow;
my %nrOfDlHarqErrorsInWindow;
my %nrOfUlHarqErrorsInWindow;

my @allFields;
my %fieldHeader;
my %fieldFormat;
my %fieldShortDescription;
my %fieldLongDescription;
my @printFields;
my $fieldSeparator = "\|";
my %fieldSource;
my $printHeader;
my $printFormat;
my %sourceVisible;

my %seenCellIds;
my %seenUeRefs;
my %bsrBufferSize;
my %transmissionModeName = (1 => "Simo", 2 => "TxDi", 3 => "Mimo");
my %harqFeedbackSimo = (0 => "N", 1 => "A", 4 => "DTX");
my %harqFeedbackMimo = (0 => "N N", 1 => "N A", 2 => "A N", 3 => "A A", 4 => "DTX");
my $power22 = 2 ** 22;
my %ulModulationName = (2 => "QPSK", 4 => "16QAM", 6 => "64QAM");
my %typeOfDataForPriority = (-12 => "SIB1", -11 => "MSG2", -10 => "PCCH", -9 => "POSTPONED", -8 => "SIB",
                             -7 => "CCCH", 0 => "MAC_CTRL", 1 => "CQI", 4 => "DRB", 32 => "DRB", 249 => "COLLIDED");
my $rbg;
my $maxDlPrb;
my $lastShownSfn = -1;;
my $lastShownSf = -1;
my %ueIsInCellId;
my %ueRefConnectedToRnti;

my %averageNrOfValues;
my %averageValue;
my %averageSeenUeRefs;

my $chartNextUeNr = 0;
my %chartValue;
my %chartNrOfValues;
my %chartLastValue;
my %chartUeNrFromUeRef;
my $chartTime = 0;
my $chartOkToStepTime = 0;
  
saveArguments(@ARGV);
handleArguments();

my $headTitles = $settings{headtitles};
my $useCommaAsDecimal = $settings{csv} && !$settings{csvUseComma};
my $averageDetails = $settings{averageDetails};

initializePrintFields();
setPrintFields();

handleCommand();


sub handleArguments
{
  $settings{debug} = isFlagSet("debug");

  if(isFlagSet("help", 1))
  {
    printUsage();
    exit;
  }

  $settings{every} = getFlagValue("every", 1);
  $settings{pass} = getFlagValue("pass", 1);
  if($settings{every} eq "")
  {
    # check first
    $settings{traceTime} = isFlagSet("time");
    if(isFlagSet("csv2"))
    {
      $settings{csv} = 1;
      $settings{csvUseComma} = 1;
    } else {
      $settings{csv} = isFlagSet("csv");
      $settings{csvUseComma} = 0;
    }
    $settings{chart} = isFlagSet("chart");
    $settings{showallsf} = isFlagSet("sf");
    $settings{showaverage} = isFlagSet("average", 2);
    $settings{averageDetails} = isFlagSet("details", 2);
    $settings{headtitles} = getFlagValue("head", 2);
    if($settings{headtitles} eq "")
    {
      $settings{headtitles} = $settings{csv} ? 0 : 40;
    }
    $settings{alwaysShowRxPwr} = isFlagSet("rxpwr", 2);
    
    # check then
    $settings{traces} = isFlagSet("traces", 1);
    $settings{columns} = isFlagSet("columns", 3);
    $settings{showSystemInformationData} = isFlagSet("sib", 2);
    $settings{userspecifiedfields} = getFlagValue("show", 4);
    $settings{cellId} = getFlagValue("cell", 1);
    $settings{validUeRef} = getFlagValue("ue");
    if($settings{validUeRef} ne "")
    {
      $settings{validUeRef} = ",$settings{validUeRef},";
      $settings{validUeRef} =~ s/ //g;
    }
    $settings{source} = isFlagSet("source", 2);
    $settings{all} = isFlagSet("all", 1);
    $settings{keep} = isFlagSet("keep", 1);
    $settings{one} = isFlagSet("one", 1);
    $settings{filter} = getFlagValue("filter", 1);
    $settings{bfnRegister} = isFlagSet("bfnregister", 3);
    $settings{rlc} = isFlagSet("rlc");
    $settings{fieldseparator} = getFlagValue("separator", 1);
    $settings{dl} = isFlagSet("dl");
    $settings{ul} = isFlagSet("ul");
    if($settings{fieldseparator} ne "") {$fieldSeparator = $settings{fieldseparator};}
    $settings{numerical} = isFlagSet("numerical", 3);
    
    $settings{bandwidth} = getFlagValue("bw", 2);
    if($settings{bandwidth} eq "" && !$settings{traces} && !$settings{columns})
    {
      $settings{bandwidth} = "10";
      print STDERR "Using default bandwidth $settings{bandwidth} MHz. For other use -bw flag.\n";
    }

    if(!$settings{traces} && !$settings{columns})
    {
      print STDERR "Run bbfilter -traces for suggestion on traces to turn on.\n";
      print STDERR "Run bbfilter -columns for descriptions of the different columns.\n";
    }
    
    if($settings{chart})
    {
      $subframeWindowStartBefore = 1000;
      $subframeWindowSize = 2000;
      $settings{csv} = 1;
      $settings{numerical} = 1;
    }
  }
  
  if(!isAllArgumentsUsed())
  {
    print STDERR "Incorrect usage. Incorrect argument(s): ".(getUnusedArguments())."\n";
    printUsage();
    exit 1;
  }
}


sub handleCommand
{
  if($settings{traces})
  {
    printTraces();
  }
  elsif($settings{columns})
  {
    printColumns();
  }
  elsif($settings{every} ne "")
  {
    handleEvery();
  }
  else
  {
    initializeBsrBufferSizes();
    initializeRBG();
    handleStdin();
  }
}


sub handleEvery
{
  my $printEvery = $settings{every};
  my $passNrOfTracesSetting = $settings{pass} ne "" ? $settings{pass} : 1;
  my $passNrOfTraces = 0;
  my $printThis = 0;
  my $counter = 0;
  
  while(<STDIN>)
  {
    if(/^\[/)
    {
      if(($counter++ % $printEvery) == 0) {$passNrOfTraces = $passNrOfTracesSetting;}
      $printThis = ($passNrOfTraces-- > 0) ? 1 : 0;
    }
    if($printThis)
    {
      print $_;
    }
  }
}


# ------------- Read input -----------------------------------------------------------------


sub handleStdin
{
  my $filter = $settings{filter};
  my $showSystemInformationData = $settings{showSystemInformationData};
  my $radioTimeStamp;
  my $decodedRadioTime;
  my $line;
  my $originalLine = "";
  my $savedUlSchedulerTrace = "";

  while($originalLine = <STDIN>)
  {
    $line = $originalLine;
    $line =~ s/\s[^\s]*?\:\d+(?:\s\?)?\:\s\<\!.*?\.\d+\!\>//; # remove filename and trace id
    $line =~ s/^\[\d+\.\d+\.\d+\.\d+\]\s//; # remove possible ip address in the beginning
    
    if($line =~ /^\[.*?\] (0x[0-9a-fA-F]+) / || $line =~ /^xxxx-xx-xx xx:xx:xx.xxx (0x[0-9a-fA-F]+) /)
    {
      $radioTimeStamp = $1;
      $decodedRadioTime = decodeRadioTime($radioTimeStamp);
      $line =~ s/$radioTimeStamp/$radioTimeStamp=($decodedRadioTime)/;
    }

    if($line =~ /^trace\.time: (.*?), trace\.bfnregister: (.*?), trace\.bfn: (.*?), trace\.sfn: (.*?), trace\.sf: (.*?), signal\.name: (.*?), signal\.struct: (.*?), (.*)/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime, $signalName, $structName, $signalData) = ($1, $2, $3, $4, int $5, $6, $7, $8);
      handleData();
    }

# new iteration 15
#[2011-10-24 08:05:34.104] 0x1ea37c39 ULMA4/UpcDlMacCeFt_PDCCH LEVEL2 dlmacce_l1transfo_ovltracescheduledsessions.c:125: <!UPCDL.73!> cellId=128 bbUeRef=80000d20 subframeNr=5: Selected SE and HARQ: rnti=717 HARQ idx=5 noOfCw=2 ndf={1 1} tbs={61664 61664} mcs={27 27} noOfSBs={2147483520 1} rv={0 0} ndi={1 1} rmGbits={68256 68256}

# new iteration 12
#[xxxx-xx-xx xx:xx:xx.xxx] 0x1dd727cb=(bfn:477, sfn:477, sf:7.60, bf:124) ULMA4/UpcDlMacCeFt_DL_SCHEDULER LEVEL2 dlmacce_l1transfo.c:700: <!UPCDL.73!> cellId=1 bbUeRef=1000140 subframeNr=9: Selected SE and HARQ: rnti=62 HARQ idx=2 noOfCw=2 ndf={1 1} tbs={31704 31704} mcs={27 27} noOfSBs={4294934528 0} rv={0 0} ndi={0 1}  rmGbits={39600 39600}
#[xxxx-xx-xx xx:xx:xx.xxx] 0x3b527ac0=(bfn:949, sfn:949, sf:2.60, bf:172) ULMA4/UpcDlMacCeFt_DL_SCHEDULER LEVEL2 cellId=1 bbUeRef=16777376 subframeNr=4: Selected SE and HARQ: rnti=64 HARQ idx=7 noOfCw=2 ndf={1 1} tbs={51024 51024} mcs={27 27} noOfSBs={4294963200 0} rv={0 0} ndi={0 0} rmGbits={63360 63360}
    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcDlMacCeFt_.*?cellId=(\d+) bbUeRef=[0]*([0-9a-f]+) subframeNr=(\d+): Selected SE and HARQ: rnti=(\d+) HARQ idx=(\d+) noOfCw=(\d+) ndf=\{(\d+) (\d+)\} tbs=\{(\d+) (\d+)\} mcs=\{(\d+) (\d+)\} noOfSBs=\{(\d+) (\d+)\} rv=\{(\d+) (\d+)\} ndi=\{(\d+) (\d+)\} \s?rmGbits=\{(\d+) (\d+)\}/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $ueRef, $sf, $rnti, $harqId, $noOfCw, $ndf1, $ndf2, $tbs1, $tbs2, $mcs1, $mcs2, $noOfSb1, $noOfSb2, $rv1, $rv2, $ndi1, $ndi2, $rmGbits1, $rmGbits2) = ($6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25);

      my $sfn = calculateSfn($traceSfnTime, $traceSfTime, 2);;
      my $sf2 = ($traceSfTime + 2) > 9 ? $traceSfTime - 8 : $traceSfTime + 2;
      $ueRefConnectedToRnti{$rnti} = $ueRef;
        
      if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "dl_sched_mcs"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;

        $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlMcs1'} = $mcs1;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlMcs2'} = $mcs2;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlModulation'} = getDlModulationFromMcs($mcs1);

        if($settings{numerical})
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlNdf'} = $ndf1 ? 1 : 0;
        }
        else
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlNdf'} = $ndf1 ? "Y" : "N";
        }

        if($tbs2 > 80000)
        {
          # Simo/TxDiv, show only first
          $tbs2 = "0";
          $rmGbits2 = "0";
        }
        else
        {
          if($settings{numerical})
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlNdf'} .= $ndf2 ? 1 : 0;
          }
          else
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlNdf'} .= $ndf2 ? " Y" : " N";
          }
        }
        
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlTb1'} = $tbs1;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlTb2'} = $tbs2;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlNdi'} = $ndi1;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlNdi'} .= $ndi2;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlRateMatchedBits1'} = $rmGbits1;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlRateMatchedBits2'} = $rmGbits2;
      }
    }
   
# New iteration 18
#[2012-09-05 03:36:45.937461] 0xe126f75a=(bfn:3602, sfn:530, sf:7.40, bf:117) ULMA4/UpcDlMacCeFt_PDCCH LEVEL3 dlmacce_schedsession_resourcectrljobready.c:261: <!UPCDL.104!> cellId=41 bbUeRef=29004060 bbBearerRef=29004062 subframeNr=9 : SeSession Data UE PQ : prioQ=3 lcId=3 assignableBytes=7554 assignedBytes={0 0} timeWhenLastScheduled=10041 timeWhenDataArrival=0 disableAtHandover=1 nackedHpIdBm=0x0 activated=1

    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcDlMacCeFt_PDCCH LEVEL3 cellId=(\d+) bbUeRef=[0]*([0-9a-f]+) bbBearerRef=\d+ subframeNr=(\d+) : SeSession Data UE PQ : prioQ=\d+ lcId=(\d+) assignableBytes=(\d+)/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $ueRef, $sf, $lcid, $dlAssignableBytes) = ($6, $7, $8, $9, $10);

      my $sfn = calculateSfn($traceSfnTime, $traceSfTime, 2);

      if(flushData($cellId, $sfn, $sf, $ueRef, "dl_bits_lcid$lcid"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlAssignableBits'} += $dlAssignableBytes * 8;
      }
    }
   
# New iteration 14
#[2012-02-24 07:37:23.114432] 0xdfe4376c=(bfn:3582, sfn:510, sf:4.47, bf:118) ULMA4/UpcDlMacCeFt_DL_SCHEDULER LEVEL2 dlmacce_schedsession_ovlprelajobready.c:297: <!UPCDL.118!> cellId=1 bbUeRef=1003b80 subframeNr=6 : Assigned SE PQ : rnti=155 PQ(lcid=3 pqWeight=14614084 assignableBytes=13021 minPduSizeInBytes=7)

    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcDlMacCeFt_DL_SCHEDULER LEVEL2 cellId=(\d+) bbUeRef=[0]*([0-9a-f]+) subframeNr=(\d+) : Assigned SE PQ : rnti=(\d+) PQ\(lcid=(\d+) .*?ssignableBytes=(\d+) minPduSizeInBytes=\d+\)/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $ueRef, $sf, $rnti, $lcid, $dlAssignableBytes) = ($6, $7, $8, $9, $10, $11);

      my $sfn = calculateSfn($traceSfnTime, $traceSfTime, 2);
      $ueRefConnectedToRnti{$rnti} = $ueRef;

      if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "dl_bits_lcid$lcid"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlAssignableBits'} += $dlAssignableBytes * 8;
      }
    }

#[xxxx-xx-xx xx:xx:xx.xxx] 0xd905388d=(bfn:3472, sfn:400, sf:5.53, bf:136) ULMA4/UpcDlMacCeFt_DL_SCHEDULER LEVEL3 dlmacce_l1transfo_ovltracescheduledsessions.c:211: <!UPCDL.76!> cellId=41 bbUeRef=29001860 : Selected SE and PQ: rnti=63 PQ=3 lcid=3 assignableBytes=1069877 assignedBytes={0 0} minPduSize=7

    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcDlMacCeFt_DL_SCHEDULER LEVEL3 cellId=(\d+) bbUeRef=[0]*([0-9a-f]+) : Selected SE and PQ: rnti=(\d+) PQ=\d+ lcid=(\d+) assignableBytes=(\d+)/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $ueRef, $rnti, $lcid, $dlAssignableBytes) = ($6, $7, $8, $9, $10);

      my $sfn = calculateSfn($traceSfnTime, $traceSfTime, 2);
      my $sf = calculateSf($traceSfTime, 2);
      $ueRefConnectedToRnti{$rnti} = $ueRef;

      if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "dl_bits_lcid$lcid"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlAssignableBits'} += $dlAssignableBytes * 8;
      }
    }

#[2011-02-08 16:11:46.996554] 0xc7d27283=(bfn:3197, sfn:125, sf:2.60, bf:40) ULMA4/UpcDlMacCeFt_DL_SCHEDULER LEVEL3 dlmacce_l1transfo.c:784: <!UPCDL.76!> cellId=126 bbUeRef=7e000000 : Selected SE and PQ: rnti=61 PQ=3 lcid=3 assignableBits=13056 assignedBits={5736 5736} minPduSize=56

    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcDlMacCeFt_DL_SCHEDULER LEVEL3 cellId=(\d+) bbUeRef=[0]*([0-9a-f]+) : Selected SE and PQ: rnti=(\d+) PQ=\d+ lcid=(\d+) assignableBits=(\d+)/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $ueRef, $rnti, $lcid, $dlAssignableBits) = ($6, $7, $8, $9, $10);

      my $sfn = calculateSfn($traceSfnTime, $traceSfTime, 2);
      my $sf = calculateSf($traceSfTime, 2);
      $ueRefConnectedToRnti{$rnti} = $ueRef;

      if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "dl_bits_lcid$lcid"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlAssignableBits'} += $dlAssignableBits;
      }
    }

# New iteration 12
#[xxxx-xx-xx xx:xx:xx.xxx] 0x79071278=(bfn:1936, sfn:912, sf:7.53, bf:39) ULMA4/UpcDlMacCeFt_DL_SCHEDULER LEVEL2 dlmacce_schedsession_ovlprelajobready.c:344: <!UPCDL.118!> cellId=0 bbUeRef=40 subframeNr=9 : Assigned SE PQ : rnti=61 PQ(lcid=3 pqWeight=14614084 assignableBits=2352984 minPduSize=56)

    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcDlMacCeFt_DL_SCHEDULER LEVEL2 cellId=(\d+) bbUeRef=[0]*([0-9a-f]+) subframeNr=(\d+) : Assigned SE PQ : rnti=(\d+) PQ\(lcid=(\d+) .*?ssignableBits=(\d+) minPduSize=\d+\)/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $ueRef, $sf, $rnti, $lcid, $dlAssignableBits) = ($6, $7, $8, $9, $10, $11);

      my $sfn = calculateSfn($traceSfnTime, $traceSfTime, 2);
      $ueRefConnectedToRnti{$rnti} = $ueRef;

      if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "dl_bits_lcid$lcid"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlAssignableBits'} += $dlAssignableBits;
      }
    }

# Newer style, iteration 16
#[2012-01-11 07:47:01.028] 0xfd016034 ULMA4/UpcDlMacCeFt_MCS_CONFIGURATION LEVEL2 dlmacce_schedsession_ovlprelajobready.c:297: <!UPCDL.118!> cellId=11 bbUeRef=b0002c0 subframeNr=3 : Assigned SE PQ : rnti=142 PQ(lcid=1 pqWeight=0 assignableBytes=0 minPduSizeInBytes=7)

    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcDlMacCeFt_MCS_CONFIGURATION LEVEL2 cellId=(\d+) bbUeRef=[0]*([0-9a-f]+) subframeNr=(\d+) : Assigned SE PQ : rnti=(\d+) PQ\(lcid=(\d+) .*?assignableBytes=(\d+)/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $ueRef, $sf, $rnti, $lcid, $dlAssignableBytes) = ($6, $7, $8, $9, $10, $11);

      my $sfn = calculateSfn($traceSfnTime, $traceSfTime, 2);
      $ueRefConnectedToRnti{$rnti} = $ueRef;

      if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "dl_bits_lcid$lcid"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlAssignableBits'} += $dlAssignableBytes * 8;  # convert to bits
      }
    }

# Newer style
#[xxxx-xx-xx xx:xx:xx.xxx] 0xe5e61df3=(bfn:3678, sfn:606, sf:6.47, bf:223) ULMA4/UpcDlMacCeFt_DL_SCHEDULER LEVEL2 cellId=0 subframeNr=8 : Assigned SE PQ: rnti=12 bbUeRef=15 PQ(lcid=3 dlAssignableBytes=5337296 minPduSizeInBytes=56)

    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcDlMacCeFt_DL_SCHEDULER LEVEL2 cellId=(\d+) subframeNr=(\d+) : Assigned SE PQ: rnti=(\d+) bbUeRef=(\d+) PQ\(lcid=(\d+) .*?ssignableBytes=(\d+) minPduSizeInBytes=\d+\)/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $sf, $rnti, $ueRefDec, $lcid, $dlAssignableBytes) = ($6, $7, $8, $9, $10, $11);
      my $ueRef = sprintf("%x", $ueRefDec);

      my $sfn = calculateSfn($traceSfnTime, $traceSfTime, 2);
      $ueRefConnectedToRnti{$rnti} = $ueRef;

      if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "dl_bits_lcid$lcid"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlAssignableBits'} += $dlAssignableBytes * 8;  # convert to bits
      }
    }
    
#[xxxx-xx-xx xx:xx:xx.xxx] 0xe5e61df3=(bfn:3678, sfn:606, sf:6.47, bf:223) ULMA4/UpcDlMacCeFt_DL_SCHEDULER LEVEL2 cellId=0 subframeNr=8 : Assigned SE PQ: rnti=12 bbUeRef=15 PQ(lcid=3 dlAssignableBits=5337296 minPduSize=56)
#[xxxx-xx-xx xx:xx:xx.xxx] 0x4cc34906=(bfn:1228, sfn:204, sf:3.47, bf:144) ULMA4/UpcDlMacCeFt_DL_SCHEDULER LEVEL2 cellId=0 subframeNr=5 : Assigned SE PQ: rnti=63 bbUeRef=64 PQ(lcid=3 assignableBits=1744768 minPduSize=56)

    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcDlMacCeFt_DL_SCHEDULER LEVEL2 cellId=(\d+) subframeNr=(\d+) : Assigned SE PQ: rnti=(\d+) bbUeRef=(\d+) PQ\(lcid=(\d+) .*?ssignableBits=(\d+) minPduSize=\d+\)/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $sf, $rnti, $ueRefDec, $lcid, $dlAssignableBits) = ($6, $7, $8, $9, $10, $11);
      my $ueRef = sprintf("%x", $ueRefDec);

      my $sfn = calculateSfn($traceSfnTime, $traceSfTime, 2);
      $ueRefConnectedToRnti{$rnti} = $ueRef;

      if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "dl_bits_lcid$lcid"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlAssignableBits'} += $dlAssignableBits;
      }
    }

# Old style
#[2010-02-18 11:34:28.468] 0x6e77ef0c=(bfn:1767, sfn:743, sf:8.40, bf:240) ULMA4\/UpcDlMacCeFt_DL_SCHEDULER LEVEL2 cellId=1 subframeNr=0 : Assigned SE: rnti=65535 seSesDataS(seWeight=17268211 nrOfPqs=1 pqWeight={17268211 0 0 0 0} dciFormat=2 timingAlignmentBits=0 tacOctet=65535 nrofCce=8 startCceIdx=0 dlGinrOuterLoopAdj=SQ8_15(0x0))

    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcDlMacCeFt_DL_SCHEDULER LEVEL2 cellId=(\d+) subframeNr=(\d+) : Assigned SE: rnti=(\d+) .*? dlGinrOuterLoopAdj=SQ8_15\((.*?)\)/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $sf, $rnti, $dlGinrOuterLoopAdj) = ($6, $7, $8, $9);

      my $ueRef = lookUpUeRefFromRnti($rnti);
      my $sfn = calculateSfn($traceSfnTime, $traceSfTime, 2);
      $ueRefConnectedToRnti{$rnti} = $ueRef;

      if($rnti < 65534 && flushData($cellId, $sfn, $sf, $ueRef, "dl_outloop"))
      {
        # dlOutLoopAdj is not applicable for system information
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlGinrOuterLoopAdj'} = dlGinrOuterLoopAdjToText($dlGinrOuterLoopAdj);
      }
    }

# New style
#[xxxx-xx-xx xx:xx:xx.xxx] 0x44e6fc1e=(bfn:1102, sfn:78, sf:7.40, bf:193) ULMA4/UpcDlMacCeFt_DL_SCHEDULER LEVEL2 dlmacce_schedsession_ovlprelajobready.c:321: <!UPCDL.117!> cellId=1 bbUeRef=1000460 subframeNr=9: Assigned SE : rnti=127 seWeight=14614084 nrOfPqs=11 dciFormat=6 timingAlignmentBits=0 tacOctet=65535 nrofCce=1 startCceIdx=4 dlGinrOuterLoopAdj=SQ8_15(0xfffeb3bd)

    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcDlMacCeFt.* LEVEL2 cellId=(\d+) bbUeRef=[0]*([0-9a-f]+) subframeNr=(\d+): Assigned SE : rnti=(\d+) .*? dlGinrOuterLoopAdj=SQ8_15\((.*?)\)/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $ueRef, $sf, $rnti, $dlGinrOuterLoopAdj) = ($6, $7, $8, $9, $10);

      my $sfn = calculateSfn($traceSfnTime, $traceSfTime, 2);
      $ueRefConnectedToRnti{$rnti} = $ueRef;

      if($rnti < 65534 && flushData($cellId, $sfn, $sf, $ueRef, "dl_outloop"))
      {
        # dlOutLoopAdj is not applicable for system information
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlGinrOuterLoopAdj'} = dlGinrOuterLoopAdjToText($dlGinrOuterLoopAdj);
      }
    }

# iteration 15
#[xxxx-xx-xx xx:xx:xx.xxx] 0x9e971896=(bfn:2537, sfn:489, sf:7.53, bf:137) ULMA4/UpcUlMacCeFt_UL_SCHEDULER SEND ulmacce_sescheduler_end.c:453: <!UPCUL.107!> cellId=0 bbUeRef=160 systemFrameNr=490 subframeNr=3 : Sent UeAllocInd for UE: crnti=62 l1: ulHarqProcId=7 rvIdx=0 newDataFlag=1 qm=4 tbs=5544 prbListStart=1 prbListEnd=12 fh=0 cfrExpected=0

    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcUlMacCeFt_UL_SCHEDULER.*?cellId=(\d+) bbUeRef=[0]*([0-9a-f]+) systemFrameNr=(\d+) subframeNr=(\d+) : Sent UeAllocInd for UE: crnti=(\d+) .*?newDataFlag=(\d+) qm=(\d+) tbs=(\d+) prbListStart=(\d+) prbListEnd=(\d+)/)
    {
        ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
        my ($cellId, $ueRef, $sfn, $sf, $rnti, $newDataFlag, $qm, $tbs, $prbListStart, $prbListEnd) = ($6, $7, $8, $9, $10, $11, $12, $13, $14, $15);

        $ueRefConnectedToRnti{$rnti} = $ueRef;

        if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "ul_sched"))
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
          $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
          $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
          $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
          $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
          $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
          if($settings{numerical})
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'ulNdf'} = $newDataFlag ? 1 : 0;
          }
          else
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'ulNdf'} = $newDataFlag ? "Y" : "N";
          }
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulModulation'} = getUlModulationFromQm($qm);
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulTbs'} = $tbs * 8;  # convert to bits
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrb'} = $prbListEnd - $prbListStart + 1;
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrbStart'} = $prbListStart;
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrbEnd'} = $prbListEnd;
        }
    }

# newer style, iteration 15
#[xxxx-xx-xx xx:xx:xx.xxx] 0x9e97153a=(bfn:2537, sfn:489, sf:7.53, bf:83) ULMA4/UpcUlMacCeFt_UL_SCHEDULER SEND ulmacce_sescheduler_end.c:348: <!UPCUL.105!> cellId=0 bbUeRef=160 systemFrameNr=489 subframeNr=9 : Sent PdcchInd for UE: rnti=62 cceIndex=9 nrOfCce=1 nrOfRbaBits=7 startRbaBit=2 rbaBits=0x92000000 nrOfPayloadBit=15 dciMsg={0x2c40 0x0} dciMsg[0]: mcs=22 newDataIndicator=0 puschTpc=1

# newer style, iteration 12
#[xxxx-xx-xx xx:xx:xx.xxx] 0xdbc2769c=(bfn:3516, sfn:444, sf:2.60, bf:105) ULMA4/UpcUlMacCeFt_UL_SCHEDULER LEVEL3 ulmacce_schedmsgbuilder.c:330: <!UPCUL.105!> cellId=0 bbUeRef=4e0 systemFrameNr=444 subframeNr=4 : Sent PdcchInd for UE: rnti=209 cceIndex=16 nrOfCce=1 nrOfRbaBits=11 startRbaBit=2 rbaBits=0x2b600000 nrOfPayloadBit=16 dciMsg={0x2f40 0x0} dciMsg[0]: mcs=23 newDataFlag=1 puschTpc=1
    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/.*?cellId=(\d+) bbUeRef=[0]*([0-9a-f]+) systemFrameNr=(\d+) subframeNr=(\d+) : Sent PdcchInd for UE: rnti=(\d+) cceIndex=\d+ nrOfCce=\d+ nrOfRbaBits=\d+ startRbaBit=\d+ rbaBits=.*? nrOfPayloadBit=\d+ dciMsg=\{(.*?) .*?\} dciMsg\[\d+\]: mcs=(\d+) newData.*?=(\d+) puschTpc=(\d+)/)
    {
        ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
        my ($cellId, $ueRef, $sfn2, $sf2, $rnti, $dciMsg0, $mcs, $newDataIndicator, $puschTpc) = ($6, $7, $8, $9, $10, $11, $12, $13, $14);

        $ueRefConnectedToRnti{$rnti} = $ueRef;
        my $sfn = calculateSfn($sfn2, $sf2, 4);
        my $sf = calculateSf($sf2, 4);

        if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "ul_sched"))
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
          $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
          $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
          $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
          $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
          $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulMcs'} = $mcs;
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulNdi'} = $newDataIndicator;
          $saved{$cellId, $sfn, $sf, $ueRef, 'tpcPusch'} = getTpcAdjustmentFromTpcCommand($puschTpc);
          $saved{$cellId, $sfn, $sf, $ueRef, 'dai'} = hex($dciMsg0) >> 1 & 0x3;
        }
    }

# new style
# [xxxx-xx-xx xx:xx:xx.xxx] 0x666354f9=(bfn:1638, sfn:614, sf:3.53, bf:79) ULMA4/UpcDlMacCeFt_DL_SCHEDULER LEVEL3 dlmacce_combinepdcchindfo.c:1139: <!UPCDL.68!> cellId=69 subframeNr=5 : Combinded pdcchInd DL: pdcch=0: rnti=65535 cceIndex=0 nrOfCce=8 nrOfRbaBits=13 startRbaBit=2 rbaBits=52428800 dciFormat=2 nrOfPayloadBit=15 dciMsg={0x8808 0x0000} harqProcId=0 swapFlag=0 mcs={4 0} rv={1 1} ndi={1 0} pucchTpc=1
    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) .*?cellId=(\d+) subframeNr=(\d+) : Combinded pdcchInd DL: pdcch=\d+: rnti=(\d+) cceIndex=\d+ nrOfCce=\d+ nrOfRbaBits=\d+ startRbaBit=\d+ rbaBits=.*? dciFormat=\d+ nrOfPayloadBit=\d+ dciMsg=\{(.*?) .*?\} harqProcId=\d+ swapFlag=\d+ mcs=\{(\d+) (\d+)\} rv=\{(\d+) (\d+)\} ndi=\{(\d+) (\d+)\}(.*)/)
    {
        ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
        my ($cellId, $sf, $rnti, $dciMsg0, $mcs1, $mcs2, $rv1, $rv2, $ndi1, $ndi2, $tpcCommand) = ($6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);

        my $ueRef = lookUpUeRefFromRnti($rnti);
        $ueRefConnectedToRnti{$rnti} = $ueRef;
        my $sfn = calculateSfn($traceSfnTime, $traceSfTime, 2);

        if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "dl_sched_mcs"))
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
          $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
          $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
          $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
          $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
          $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlMcs1'} = $mcs1;
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlMcs2'} = $mcs2;
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlModulation'} = getDlModulationFromMcs($mcs1);
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlNdi'} = $ndi1;
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlNdi'} .= $ndi2;

          if($tpcCommand =~ / pucchTpc=(\d+)/)
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'tpcPucch'} = getTpcAdjustmentFromTpcCommand($1);
          }
          elsif($tpcCommand =~ / puschTpc=(\d+)/)
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'tpcPusch'} = getTpcAdjustmentFromTpcCommand($1);
          }

          $saved{$cellId, $sfn, $sf, $ueRef, 'dai'} = hex($dciMsg0) >> 1 & 0x3;
        }
    }

# tdd style
#[xxxx-xx-xx xx:xx:xx.xxx] 0xc8043ee6=(bfn:3200, sfn:128, sf:4.47, bf:238) ULMA4/UpcUlMacCeFt_UL_SCHEDULER LEVEL3 ulmacce_schedmsgbuilder.c:322: Sent PdcchInd for UE: cellId=236, bbUeRef=3959423040, systemFrameNr=128, subframeNr=6, rnti=63, cceIndex=0, nrOfCce=2, nrOfRbaBits=13, startRbaBit=2, rbaBits=0x12a80000, nrOfPayloadBit=18, dciMsg={0x1a46 0x0}, dciMsg[0]: mcs=13, newDataFlag=0, puschTpc=1]

# newer style, iteration 11
# Sent PdcchInd for UE: cellId=90, bbUeRef=1509949440, systemFrameNr=859, subframeNr=0, rnti=61, cceIndex=3, nrOfCce=1, nrOfRbaBits=11, startRbaBit=2, rbaBits=0x2b600000, nrOfPayloadBit=16, dciMsg={0x2e40 0x0}, dciMsg[0]: mcs=23, newDataFlag=0, puschTpc=1]

# new style
# Sent PdcchInd for UE: cellId=0, bbUeRef=1024, systemFrameNr=323, subframeNr=7, rnti=65, cceIndex=22, nrOfCce=1, nrOfRbaBits=11, startRbaBit=2, rbaBits=0x4a000000, nrOfPayloadBit=16, dciMsg={0x2e40 0x0}, dciMsg[0] mcs=23 newDataFlag=0 puschTpc=1]
    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) .*?Sent PdcchInd for UE: cellId=(\d+), bbUeRef=(\d+), systemFrameNr=(\d+), subframeNr=(\d+), rnti=(\d+), cceIndex=\d+, nrOfCce=\d+, nrOfRbaBits=\d+, startRbaBit=\d+, rbaBits=.*?, nrOfPayloadBit=\d+, dciMsg=\{(.*?) .*?\}, dciMsg\[\d+\]:? mcs=(\d+),? newDataFlag=(\d+)(.*)\]/)
    {
        ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
        my ($cellId, $ueRefDec, $sfn, $sf, $rnti, $dciMsg0, $mcs, $newDataIndicator, $tpcCommand) = ($6, $7, $8, $9, $10, $11, $12, $13, $14);
        my $ueRef = sprintf("%x", $ueRefDec);

        $ueRefConnectedToRnti{$rnti} = $ueRef;

        if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "ul_sched"))
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
          $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
          $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
          $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
          $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
          $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulMcs'} = $mcs;
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulNdi'} = $newDataIndicator;

          if($tpcCommand =~ / pucchTpc=(\d+)/)
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'tpcPucch'} = getTpcAdjustmentFromTpcCommand($1);
          }
          elsif($tpcCommand =~ / puschTpc=(\d+)/)
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'tpcPusch'} = getTpcAdjustmentFromTpcCommand($1);
          }

          $saved{$cellId, $sfn, $sf, $ueRef, 'dai'} = hex($dciMsg0) >> 1 & 0x3;
        }
    }

# newer style, iteration 12 + iteration 15
#[xxxx-xx-xx xx:xx:xx.xxx] 0xaf009384=(bfn:2800, sfn:752, sf:0.60, bf:56) ULMA4/UpcUlMacCeFt_UL_SCHEDULER TIMER ulmacce_sescheduler_trace.c:162: <!UPCUL.211!> cellId=0 bbUeRef=1e80 systemFrameNr=752 subframeNr=6 : Scheduler FO: retrans=0 seWeight=14614084 requiredTbs=6378 estimatedNrOfSbs 110 rnti=62 nrofCce=4 startCceIdx=4 isCqiReporting=0 startSb=1 nrOfSbs=96 tbs=3963 mcs=17 resAllocStr=0 qm6SelectedGinr=320 qm6SelectedSinr=524 rvIdx=0 nrOfResForData=13808 isAperiodicCqiAllowed=1
    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) .*?cellId=(\d+) bbUeRef=[0]*([0-9a-f]+) systemFrameNr=(\d+) subframeNr=(\d+) : Scheduler FO: .*?seWeight=\d+ requiredTbs=\d+ .*?rnti=(\d+) .*?tbs=(\d+) mcs=(\d+)/)
    {
        ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
        my ($cellId, $ueRef, $sfn, $sf, $rnti, $tbs, $mcs) = ($6, $7, $8, $9, $10, $11, $12);

        $ueRefConnectedToRnti{$rnti} = $ueRef;

        if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "ul_sched"))
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
          $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
          $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
          $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
          $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
          $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulTbs'} = $tbs * 8;  # convert to bits
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulMcs'} = $mcs;
        }
    }

# [xxxx-xx-xx xx:xx:xx.xxx] 0x9434596a=(bfn:2371, sfn:323, sf:4.60, bf:150) ULMA4/UpcUlMacCeFt_UL_SCHEDULER LEVEL3 ulmacce_sescheduler.c:420: Scheduler FO: cellId=0,bbUeRef=1024, systemFrameNr=324, subframeNr=0, seWeight=14614084, requiredTbs=6378, rnti=65, nrofCce=1, startCceIdx=5, isCqiReporting=0 isSatisfied 0, startSb 1, nrOfSbs 48, tbs 3062, mcs 23, nrOfResForData 6912]
    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) .*?Scheduler FO: cellId=(\d+),bbUeRef=(\d+), systemFrameNr=(\d+), subframeNr=(\d+), seWeight=\d+, requiredTbs=\d+, rnti=(\d+), nrofCce=\d+, startCceIdx=\d+, isCqiReporting=\d+ isSatisfied \d+, startSb \d+, nrOfSbs \d+, tbs (\d+), mcs (\d+), nrOfResForData/)
    {
        ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
        my ($cellId, $ueRefDec, $sfn, $sf, $rnti, $tbs, $mcs) = ($6, $7, $8, $9, $10, $11, $12);
        my $ueRef = sprintf("%x", $ueRefDec);

        $ueRefConnectedToRnti{$rnti} = $ueRef;

        if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "ul_sched"))
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
          $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
          $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
          $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
          $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
          $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulTbs'} = $tbs * 8;  # convert to bits
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulMcs'} = $mcs;
        }
    }
    
# old style
# Sent PdcchInd for UE: [bbUeRef 33554528,rnti=70, cceIndex=3, nrOfCce=1, nrOfRbaBits=9, startRbaBit=2, rbaBits=0x56800000, nrOfPayloadBit=16, dciMsg={0x2e40 0x0}, dciMsg[0] mcs=23 newDataFlag=0 pucchTpc=1]
# Sent PdcchInd for UE: [bbUeRef 1344,rnti=146, cceIndex=16, nrOfCce=8, nrOfRbaBits=11, startRbaBit=2, rbaBits=0x2b600000, nrOfPayloadBit=16, dciMsg={0x1280 0x0}, dciMsg[0] mcs=9 newDataFlag=0 puschTpc=2]                              
    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? .*? Sent PdcchInd for cellId=(\d+). \[sub (\d+), sfn (\d+), totalNrOfDci (\d+), lastPdcchInd (\d+)\]/)
    {
      my ($cellId, $sf, $sfn, $totalNrOfDci, $lastPdcchInd) = ($1, $2, $3, $4, $5);

      if($savedUlSchedulerTrace =~ /^\[(.*?)\] (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) .*?Sent PdcchInd for UE: \[bbUeRef (.*?),rnti=(\d+), cceIndex=.*?, nrOfCce=.*?, nrOfRbaBits=.*?, startRbaBit=.*?, rbaBits=0x.*?, nrOfPayloadBit=.*?, dciMsg=\{(0x.*?) 0x.*?\}, dciMsg\[0\] mcs=(\d+) newDataFlag=(\d+)(.*)\]/)
      {
        ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
        my ($ueRefDec, $rnti, $dciMsg0, $mcs, $newDataIndicator, $tpcCommand) = ($6, $7, $8, $9, $10, $11);
        my $ueRef = sprintf("%x", $ueRefDec);

        $ueRefConnectedToRnti{$rnti} = $ueRef;

        if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "ul_sched"))
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
          $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
          $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
          $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
          $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
          $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulMcs'} = $mcs;
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulNdi'} = $newDataIndicator;

          if($tpcCommand =~ / pucchTpc=(\d+)/)
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'tpcPucch'} = getTpcAdjustmentFromTpcCommand($1);
          }
          elsif($tpcCommand =~ / puschTpc=(\d+)/)
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'tpcPusch'} = getTpcAdjustmentFromTpcCommand($1);
          }
          
          $saved{$cellId, $sfn, $sf, $ueRef, 'dai'} = hex($dciMsg0) >> 1 & 0x3;
        }
      }
      $savedUlSchedulerTrace = "";
    }
    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) .*?Sent PdcchInd for UE: \[bbUeRef (.*?),rnti=(\d+), cceIndex=.*?, nrOfCce=.*?, nrOfRbaBits=.*?, startRbaBit=.*?, rbaBits=0x.*?, nrOfPayloadBit=.*?, dciMsg=\{0x.*? 0x.*?\}, dciMsg\[0\] mcs=(\d+) newDataFlag=(\d+)(.*?)\]/)
    {
      # this trace comes first, but it does not have the cell id
      $savedUlSchedulerTrace = $line;
    }

# old style

    elsif($line =~ /^\[(.*?)\] (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcUlMacCeFt_UL_SCHEDULER LEVEL3 ulmacce_schedmsgbuilder.c \[.*?\]: Sent PdcchInd for cellId=(\d+). \[sub,sfn,totalNrOfDci,lastPdcchInd\]:\[(.*?),(.*?),.*?,.*?\]. pddch\[0\]: rnti=(\d+) cceIndex=.*? nrOfCce=.*? nrOfRbaBits=.*? startRbaBit=.*? rbaBits=0x.*? nrOfPayloadBit=.*? dciMsg=\{0x.*? 0x.*?\} dciMsg\[0\] mcs=(\d+) newDataFlag=(\d+)/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $sf, $sfn, $rnti, $mcs, $newDataFlag) = ($6, $7, $8, $9);

      my $ueRef = lookUpUeRefFromRnti($rnti);
      
      if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "ul_sched"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulMcs'} = $mcs;
      }
    }

#[2010-06-16 23:20:42.856] 0xbb0411dc ULMA1/UpUlMacPeBl_Smac TRAFFIC_ABNORMAL DEMUX: cellId=17 bbUeRef=0x11000000 systemFrameNr=944 subframeNr=3: Demux result :MAC PDU received with TB CRC error. TB CRC is equal to 0xcede82, expected = 0x95a921. PDU length=9 bytes (without CRC)

    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA1\/UpUlMacPeBl_Smac TRAFFIC_ABNORMAL DEMUX: cellId=(\d+) bbUeRef=0x([0-9a-fA-F]+) systemFrameNr=(\d+) subframeNr=(\d+): Demux result :MAC PDU received with TB CRC error\. TB CRC is equal to .*?, expected = .*?\. PDU length=(\d+) bytes \(without CRC\)/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $ueRef, $sfn, $sf, $pduLength) = ($6, $7, $8, $9, $10);
      
      if(flushData($cellId, $sfn, $sf, $ueRef, "ul_crc"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulCrc'} = "ERR $pduLength";
      }
    }

# new style, iteration 15
#[xxxx-xx-xx xx:xx:xx.xxx] 0x4dd5fc81=(bfn:1245, sfn:221, sf:6.33, bf:200) ULMA4/UpcUlMacCeFt_UL_VALIDATION LEVEL3 ulmacce_validtracefo.c:472: <!UPCUL.170!> cellId=0 bbUeRef=000000c0 systemFrameNr=222 subframeNr=2 : Valid SE. rnti=68 id={0,1,0,0} lcIdBitMap={0x0006,0x0008,0x0000,0x0000} resourceAllocationStrategy={0,0,0,0} timeSinceLastScheduledPerQ={0,5,0,0} timeWhenLastAverageRateUpdate={0,0,0,0} lastNrofScheduledBytes={0,1612,0,0} averageRate={0,0,0,0} ulMinBitrate={125,125,0,0} preLaState in type SQ8_15 {ulGainOuterLoopAdjustment in qm14 -59560, qm6BestGinr in qm6 2004} puschPreLa {qm6GainFiltAvg in qm16 -5332,qm6FilteredEqGain in qm16 -98, qm6UePathlossEstimate in qm16 5581} weighterComponentIndex={0,11,0,0} numberOfWeighters={2,2,2,2} type={{4,2,0}, {4,2,0}, {4,2,0}, {4,2,0}} weight={{0,0,0}, {14614092,0,0}, {0,0,0}, {0,0,0}} pqWeight={0,14614092,0,0} bestPrbWeight={0,0,0,0} weight=14614093 harqProcessPoolIndex=-1 nrOfAttempts=0 harqFeedbackMcs=0 stateSabe=0 serviceType=0 expectingSrResponse=0 nrOfMacPaddingReceptions=0 pqIndex=0 nextEstimatedSduSize=0 arrivalTimeOfLatestPacket=1497 arrivalTimeOfOldestPacket=1497 bufferSize={0,1830388,0,0}.
#[xxxx-xx-xx xx:xx:xx.xxx] 0xb7114c58=(bfn:2929, sfn:881, sf:1.33, bf:197) ULMA4/UpcUlMacCeFt_UL_VALIDATION LEVEL3 ulmacce_validtracefo.c:1356: <!UPCUL.170!> cellId=0 bbUeRef=1e80 systemFrameNr=881 subframeNr=7 : Valid SE. id={0,1,0,0} lcIdBitMap={0x6,0x8,0x0,0x0} weighterComponentIndex={0,11,0,0} timeSinceLastScheduledPerQ={0,1,0,0} timeWhenLastAverageRateUpdate={0,0,0,0} averageRate={0,0,0,0} ulMinBitrate={125,125,0,0} preLaState in type SQ8_15 {ulGainOuterLoopAdjustment in qm14 14306} pqWeight={0,14614084,0,0} weight=14614084,nrOfAttempts=0,harqFeedbackMcs=16.

    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcUlMacCeFt_UL_VALIDATION .*?cellId=(\d+) bbUeRef=[0]*([0-9a-f]+) systemFrameNr=(\d+) subframeNr=(\d+) : Valid SE.*?ulGainOuterLoopAdjustment in qm14 (-?\d+)/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $ueRef, $sfn, $sf, $ulGainOuterloopadj) = ($6, $7, $8, $9, $10);
      
      if(flushData($cellId, $sfn, $sf, $ueRef, "ul_linkadapt"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulGainOuterLoopAdj'} = qm14ToText($ulGainOuterloopadj, 4);
      }
    }

# new style, iteration 15
#[xxxx-xx-xx xx:xx:xx.xxx] 0x9f78d583=(bfn:2551, sfn:503, sf:9.40, bf:88) ULMA4/UpcUlMacCeFt_UL_LINKADAPTATION LEVEL1 ulmacce_puschchqualityfo.c:578: <!UPCUL.226!> cellNo=0 subframe=9 sfn=503 : foInstanceNr=0 bbUeRef=0x160 rnti=62 measAvalBitMap = 0x2 qm6UlPsdTxPhr=1166 qm6UePathlossEstimate=7310 qm6GainFiltAvg=-7091 qm6FilteredEqGain=-355 gainMeasurementReceivedTime=-30488 qm6ClPccSum=0 lastClPccAdjust=17 nSbPowerLimit=3 puschPsdTime=11370080 lastWeightFactor(SQ8_15)=0x19af filteredRxPsdPusch(SQ8_15)=0xffd01999

    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcUlMacCeFt_UL_LINKADAPTATION .*?cellNo=(\d+) subframe=(\d+) sfn=(\d+) .*?bbUeRef=0x[0]*([0-9a-f]+) rnti=(\d+) .*?qm6GainFiltAvg=([-\d]+)/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $sf, $sfn, $ueRef, $rnti, $averageUlGain) = ($6, $7, $8, $9, $10, $11);
      
      if(flushData($cellId, $sfn, $sf, $ueRef, "ul_linkadapt"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
        $saved{$cellId, $sfn, $sf, $ueRef, 'averageUlGain'} = qm6ToText($averageUlGain, 1);
      }
    }

#newer style, iteration 12
#[xxxx-xx-xx xx:xx:xx.xxx] 0x727072c9=(bfn:1831, sfn:807, sf:0.47, bf:44) ULMA4/UpcUlMacCeFt_UL_LINKADAPTATION LEVEL3 ulmacce_prelafo.c:451: <!UPCUL.97!> cellId=0 bbUeRef=380 systemFrameNr=807 subframeNr=6 : PreLa FO job: requiredSbs=100 SQ8_15[averageUlGain=0xffd11e9c niPusch=0xffc44c37 ulGainOuterloopadj=0xfffc8e73] SQ8_15[ulPsdTxPhr=0xfffabbe4 clPccSum=0x0 lastWeightFactor=0x7ffb filteredRxPsdPusch=0xffcf8630]

    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcUlMacCeFt_UL_LINKADAPTATION LEVEL3.*?cellId=(\d+) bbUeRef=[0]*([0-9a-f]+) systemFrameNr=(\d+) subframeNr=(\d+) : PreLa FO job: requiredSbs.*?\[averageUlGain=(0x.*?) niPusch=0x.*? ulGainOuterloopadj=(0x.*?)\]/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $ueRef, $sfn, $sf, $averageUlGain, $ulGainOuterloopadj) = ($6, $7, $8, $9, $10, $11);
      
      my $cellId = lookUpCellIdFromUeRef($ueRef);
      if(flushData($cellId, $sfn, $sf, $ueRef, "ul_linkadapt"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'averageUlGain'} = averageUlGainToText($averageUlGain);
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulGainOuterLoopAdj'} = dlGinrOuterLoopAdjToText($ulGainOuterloopadj);
      }
    }

#[xxxx-xx-xx xx:xx:xx.xxx] 0x62e3632d=(bfn:1582, sfn:558, sf:3.60, bf:50) ULMA4/UpcUlMacCeFt_UL_LINKADAPTATION LEVEL3 ulmacce_prelafo.c:396: PreLa FO job: cellId=0, bbUeRef=1024, systemFrameNr=558, subframeNr=9,  requiredSbs 100, [averageUlGain,niPusch,ulGainOuterloopadj] in type SQ8_15 [0xffe1943b,0xffc5198d,0xfffff90b], [ulPsdTxNsb] in type SQ8_15 [0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0].

    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcUlMacCeFt_UL_LINKADAPTATION LEVEL3 .*? PreLa FO job: cellId=(\d+), bbUeRef=(\d+), systemFrameNr=(\d+), subframeNr=(\d+),  ?requiredSbs .*?, \[averageUlGain,niPusch,ulGainOuterloopadj\] in type SQ8_15 \[(0x.*?),0x.*?,(0x.*?)\]/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $ueRefDec, $sfn, $sf, $averageUlGain, $ulGainOuterloopadj) = ($6, $7, $8, $9, $10, $11);
      my $ueRef = sprintf("%x", $ueRefDec);
      
      my $cellId = lookUpCellIdFromUeRef($ueRef);
      if(flushData($cellId, $sfn, $sf, $ueRef, "ul_linkadapt"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'averageUlGain'} = averageUlGainToText($averageUlGain);
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulGainOuterLoopAdj'} = dlGinrOuterLoopAdjToText($ulGainOuterloopadj);
      }
    }

#old style
#[2010-08-21 01:45:47.019508] 0xfdd63fd5 ULMA4/UpcUlMacCeFt_UL_LINKADAPTATION LEVEL3 ulmacce_prelafo.c:334: ulmacce_prelafo.c: PreLa FO job: ueRef 0, requiredSbs -46, [averageUlGain,niPusch,ulGainOuterloopadj][0xdb30ffc4,0x81620015,0x490c0032], [ulPsdTxNsb] in type SQ8_15
    
    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcUlMacCeFt_UL_LINKADAPTATION LEVEL3 .*? PreLa FO job: ueRef (\d+), requiredSbs .*?, \[averageUlGain,niPusch,ulGainOuterloopadj\]\[(0x.*?),0x.*?,(0x.*?)\],/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($ueRef, $averageUlGain, $ulGainOuterloopadj) = ($6, $7, $8);
      
      my $cellId = lookUpCellIdFromUeRef($ueRef);
      my $sfn = $traceSfnTime;
      my $sf = $traceSfTime;
      if(flushData($cellId, $sfn, $sf, $ueRef, "ul_linkadapt"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'averageUlGain'} = averageUlGainToText($averageUlGain);
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulGainOuterLoopAdj'} = dlGinrOuterLoopAdjToText($ulGainOuterloopadj);
      }
    }
    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcDlMacCeFt_DL_VALIDATION LEVEL2 cellId=(\d+) tCurrentSubFrame \d+ : Validated: rnti=(\d+) sessiontype=\d+ seWeight=(\d+)/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $rnti, $seWeight) = ($6, $7, $8);
      
      my $ueRef = lookUpUeRefFromRnti($rnti);
      my $sfn = calculateSfn($traceSfnTime, $traceSfTime, 2);
      my $sf = calculateSf($traceSfTime, 2);

      if(($rnti < 65534 || $showSystemInformationData) && flushData($cellId, $sfn, $sf, $ueRef, "dl_valid"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $rnti;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlSeWeight'} = $seWeight;
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlType'} = getTypeOfDlData($seWeight);
      }
    }
    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) ULMA4\/UpcUlMacCeFt_UL_VALIDATION LEVEL2 .*? cellid=(\d+), bbUeRef=(\d+), systemFrameNr=(\d+), subframeNr=(\d+),.*? seWeight=(\d+),/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime) = ($1, $2, $3, $4, int $5);
      my ($cellId, $ueRefDec, $sfn, $sf, $seWeight) = ($6, $7, $8, $9, $10);
      my $ueRef = sprintf("%x", $ueRefDec);
      
      if(flushData($cellId, $sfn, $sf, $ueRef, "ul_valid"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulSeWeight'} = $seWeight;
      }
    }
    elsif($line =~ /^\[?([\dxX]{4}-.*? [\dxX]{2}:.*?)\]? (.*?)=\(bfn:(\d+), sfn:(\d+), sf:(.*?), bf:.*?\) .*?BIN.*? \: (.*?) \(/)
    {
      ($traceTime, $bfnRegister, $bfnTime, $traceSfnTime, $traceSfTime, $signalName) = ($1, $2, $3, $4, int $5, $6);
    }
    elsif($line =~ /DlRlcPeFt/i)
    {
      $rlcDirection = "dl";
    }
    elsif($line =~ /UlRlcPeFt/i)
    {
      $rlcDirection = "ul";
    }
    elsif($line =~ /^\s+NACK_SN =/i)
    {
      rlcFeedback(1);
    }
    elsif($line =~ /^\s+ACK_SN =/i)
    {
      rlcFeedback(0);
    }
    elsif($line =~ /^([^\s]+?) \{/)
    {
      $structName = $1;
      $decodePrintout .= $line;
    }
    elsif($decodePrintout ne "" && $line =~ /^\}/)
    {
      $decodePrintout .= $line;
      handleData();
      $decodePrintout = "";
      $structName = "";
    }
    elsif($decodePrintout ne "")
    {
      $decodePrintout .= $line;
    }
    
    if($filter ne "" && $line !~ /^trace/ && $line =~ /$filter/)
    {
      print $line;
    }
  }

  foreach my $cellId (keys %seenCellIds)
  {
    foreach my $ueRef (keys %seenUeRefs)
    {
      flushData($cellId, "", "", $ueRef, "force");
    }
  }
}


sub handleData
{
  if($structName !~ /S$/)  # ltng does not print the S in the end of the struct name
  {
    $structName .= "S";
    $ltng = 1;
  }
  else
  {
    $ltng = 0;
  }

  if($structName eq "UpDlMacPeCiDlUeCandidatesIndS")
  {
    UpDlMacPeCiDlUeCandidatesIndS();
  }
  elsif($structName eq "UpDlMacPeCiDlUeAllocIndS")
  {
    UpDlMacPeCiDlUeAllocIndS();
  }
  elsif($structName eq "UpUlMacPeCiUeAllocIndS" || $structName eq "UpUlMacPeCiUlUeAllocIndS")
  {
    UpUlMacPeCiUlUeAllocIndS();
  }
  elsif($structName eq "UpUlMacPeCiUlL1Meas2DlIndS")  # L12B and earlier
  {
    UpUlMacPeCiUlL1Meas2DlIndS();
  }
  elsif($structName eq "UpUlMacPeCiUlL1Measrprt2DlIndS")  # L13A and later
  {
    UpUlMacPeCiUlL1Measrprt2DlIndS();
  }
  elsif($structName eq "UpUlMacPeCiUlL1Meas2UlIndS")  # L12B and earlier
  {
    UpUlMacPeCiUlL1Meas2UlIndS();
  }
  elsif($structName eq "UpUlMacPeCiUlL1Measrprt2UlIndS")  # L13A and later
  {
    UpUlMacPeCiUlL1Measrprt2UlIndS();
  }
  elsif($structName eq "UpUlMacPeCiUlL1Harqfdbk2DlIndS")  # L13A and later
  {
    UpUlMacPeCiUlL1Harqfdbk2DlIndS();
  }
  elsif($structName eq "UpUlCellPeCiCellStatusReportIndS")
  {
    UpUlCellPeCiCellStatusReportIndS();
  }
  elsif($structName eq "UpUlMacPeCiUlMacCtrlInfoIndS")
  {
    UpUlMacPeCiUlMacCtrlInfoIndS();
  }
  elsif($structName eq "UpDlRlcPeRlcStatusForDlTrafficIndS")
  {
    UpDlRlcPeRlcStatusForDlTrafficIndS();
  }
  elsif($structName eq "UpDlRlcPeRlcStatusForUlTrafficIndS")
  {
    UpDlRlcPeRlcStatusForUlTrafficIndS();
  }
  elsif($structName eq "UpUlL1PeEiAllocationIndS")
  {
    UpUlL1PeEiAllocationIndS();
  }
  elsif($structName eq "UpUlMacPeCiDlHarqAllocIndS")
  {
    UpUlMacPeCiDlHarqAllocIndS();
  }
  #else
  #{
  #  print "Not handled: $structName\n";
  #}
}


sub rlcFeedback
{
  my $error = shift;
  
  if($rlcDirection eq "dl")
  {
    if($savedDlRlcAckNacksInWindow < $rlcWindowSize)
    {
      $savedDlRlcAckNacksInWindow++;
    }
    else
    {
      my $firstFeedback = shift @dlRlcFeedbackWindow;
      $nrOfDlRlcErrorsInWindow -= $firstFeedback;
    }

    push @dlRlcFeedbackWindow, $error;
    $nrOfDlRlcErrorsInWindow += $error;
  }
  elsif($rlcDirection eq "ul")
  {
    if($savedUlRlcAckNacksInWindow < $rlcWindowSize)
    {
      $savedUlRlcAckNacksInWindow++;
    }
    else
    {
      my $firstFeedback = shift @ulRlcFeedbackWindow;
      $nrOfUlRlcErrorsInWindow -= $firstFeedback;
    }

    push @ulRlcFeedbackWindow, $error;
    $nrOfUlRlcErrorsInWindow += $error;
  }
}


# Example:
#
# UpDlMacPeCiDlUeCandidatesIndS {
#   sigNo = 4294967295
#   transactionNo = 49746
#   cellId = 1
#   nrOfBearerSessions = 1
#   bearerDataSizes[0] {
#     bbBearerRef = 16777218
#     dataSizeInBytes = 631537
#   }
# }

sub UpDlMacPeCiDlUeCandidatesIndS
{
  if(!defined $sourceVisible{dl_cand}) {return;}
  
  readAttributeData();
  if($value{'nrOfBearerSessions'} > 0)
  {
    # skip this if no bearer sessions. otherwise to many blank lines
    
    my $cellId = $value{cellId};
    my $ueRef = -1;
    my $sfn = $traceSfnTime;
    my $sf = $traceSfTime;
    
    my $bearer = 0;
    my $dataSizeInBytes = 0;
    while(defined $value{"bearerDataSizes[$bearer].bbBearerRef"})
    {
      $dataSizeInBytes += $value{"bearerDataSizes[$bearer].dataSizeInBytes"};     
      $ueRef = $value{"bearerDataSizes[$bearer].bbBearerRef"};
      $ueRef = $ueRef & 0xFFFFFFF0;
       
      $ueRef = unpack("H8", pack("N", $ueRef));
      if(flushData($cellId, $sfn, $sf, $ueRef, "dl_cand"))
      {
      	$saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
      	$saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
      	$saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
      	$saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $traceSfnTime;
      	$saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $traceSfTime;
      	$saved{$cellId, $sfn, $sf, $ueRef, 'dlCandidatesBits'} = $dataSizeInBytes * 8;  # convert to bits
      }
     
      $bearer++;	
    }
  }
}


# Example:
#
# UpDlMacPeCiDlUeAllocIndS {
#   sigNo = 23069696
#   header {
#     cellId = 1
#     sfn = 668
#     subframeNr = 8
#   }
#   transactionNo = 49753
#   overload = 0 (0)
#   nrOfUe = 1
#   ueAlloc[0] {
#     bbUeRef = 16777216
#     decisionIndex = 0
#     l1Control {
#       rnti = 138
#       deltaPsdL1TestMode = 0
#       transmissionMode = 3
#       prbResourceIndicatorType = 0
#       prbList[] = [4294934528, 0, 16, 0]dec
#                   [ff ff 80 00 00 00 00 00 00 00 00 10 00 00 00 00]hex
#       swapFlag = 0 (0)
#     }
#     nrOfTb = 2
#     tbAlloc[0] {
#       tbIndex = 0
#       commonTb { newDataFlag = 1 (1), tbSizeInBytes = 775, l1Tb { rvIndex = 0, modType = 0, nrOfRateMatchedBits = 14400, rmSoftBits = 1237248 } }
#       macTb { dlHarqProcessId = 4, nrOfMacCtrlElem = 0 }
#       rlcTb { nrOfBearer = 1, bearerAlloc[0] { bbBearerRef = 16777218, lcid = 3, rbScheduledSizeInBytes = 775 } }
#     }
#     tbAlloc[1] {
#       tbIndex = 1
#       commonTb { newDataFlag = 1 (1), tbSizeInBytes = 775, l1Tb { rvIndex = 0, modType = 0, nrOfRateMatchedBits = 14400, rmSoftBits = 1237248 } }
#       macTb { dlHarqProcessId = 4, nrOfMacCtrlElem = 0 }
#       rlcTb { nrOfBearer = 1, bearerAlloc[0] { bbBearerRef = 16777218, lcid = 3, rbScheduledSizeInBytes = 775 } }
#     }
#   }
# }

sub UpDlMacPeCiDlUeAllocIndS
{
  if(!defined $sourceVisible{dl_alloc}) {return;}

  readAttributeData();
  my $cellId = $value{'header.cellId'};

  if($value{'nrOfUe'} > 0)
  {
    my $sfn = $value{'header.sfn'};
    my $sf = $value{'header.subframeNr'};
    
    my $alloc = 0;
    while(defined $value{"ueAlloc[$alloc].bbUeRef"})
    {
      my $ueRef = sprintf("%x", $value{"ueAlloc[$alloc].bbUeRef"});
    
      if(flushData($cellId, $sfn, $sf, $ueRef, "dl_alloc"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
        $saved{$cellId, $sfn, $sf, $ueRef, 'nrOfUe'} = $value{'nrOfUe'};

        $saved{$cellId, $sfn, $sf, $ueRef, 'rnti'} = $value{"ueAlloc[$alloc].l1Control.rnti"};
        $ueRefConnectedToRnti{$value{"ueAlloc[$alloc].l1Control.rnti"}} = $ueRef;
	my $transmissionMode = defined $value{"ueAlloc[$alloc].l1Control.transmissionMode"} ?
	  $value{"ueAlloc[$alloc].l1Control.transmissionMode"} : $value{"ueAlloc[$alloc].l1Control.txMode"};
	my $transmissionMode = $value{"ueAlloc[$alloc].l1Control.txScheme"} ? $value{"ueAlloc[$alloc].l1Control.txScheme"} : $transmissionMode;
        if($settings{numerical})
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlMode'} = int $transmissionMode;
        }
        else
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlMode'} = $transmissionModeName{int $transmissionMode};
        }
        my $prbType = $value{"ueAlloc[$alloc].l1Control.prbResourceIndicatorType"};
        if($prbType == 0)
        {
          # UPDLMACPEResAllocType0 - prbList[0] contains a bitmap according to 36.213 Ch. 7.1.6.1.
          my $prbList0 = $value{"ueAlloc[$alloc].l1Control.prbList[0]"};
	  my $dlPrb = countBitsIn32bitInt($prbList0) * $rbg;
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlPrb'} = ($dlPrb > $maxDlPrb) ? $maxDlPrb : $dlPrb;
        }
	elsif($prbType == 2)
	{
          # UPDLMACPEResAllocType2Localized  - See 36.213 Ch. 7.1.6.3 (Localized VRBs)
	  $saved{$cellId, $sfn, $sf, $ueRef, 'dlPrb'} = $value{"ueAlloc[$alloc].l1Control.prbList[1]"};
	}
        
        if($value{"ueAlloc[$alloc].nrOfTb"} > 0 && defined $value{"ueAlloc[$alloc].tbAlloc[0].tbIndex"})
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlTb1'} = $value{"ueAlloc[$alloc].tbAlloc[0].commonTb.tbSizeInBytes"} * 8;  # convert to bits
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlRvIndex'} = $value{"ueAlloc[$alloc].tbAlloc[0].commonTb.l1Tb.rvIndex"};
          if($settings{numerical})
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlNdf'} = $value{"ueAlloc[$alloc].tbAlloc[0].commonTb.newDataFlag"} ? 1 : 0;
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlModulation'} = $value{"ueAlloc[$alloc].tbAlloc[0].commonTb.l1Tb.modType"};
          }
          else
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlNdf'} = $value{"ueAlloc[$alloc].tbAlloc[0].commonTb.newDataFlag"} ? "Y" : "N";
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlModulation'} = getDlModulationFromModType($value{"ueAlloc[$alloc].tbAlloc[0].commonTb.l1Tb.modType"});
          }
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlRateMatchedBits1'} = $value{"ueAlloc[$alloc].tbAlloc[0].commonTb.l1Tb.nrOfRateMatchedBits"};
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqProcessId'} = $value{"ueAlloc[$alloc].tbAlloc[0].macTb.dlHarqProcessId"};
        }
        
        if($value{"ueAlloc[$alloc].nrOfTb"} > 1 && defined $value{"ueAlloc[$alloc].tbAlloc[1].tbIndex"})
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlTb2'} = $value{"ueAlloc[$alloc].tbAlloc[1].commonTb.tbSizeInBytes"} * 8;  # convert to bits
          if($settings{numerical})
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlNdf'} .= $value{"ueAlloc[$alloc].tbAlloc[1].commonTb.newDataFlag"} ? 1 : 0;
          }
          else
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlNdf'} .= $value{"ueAlloc[$alloc].tbAlloc[1].commonTb.newDataFlag"} ? " Y" : " N";
          }
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlRateMatchedBits2'} = $value{"ueAlloc[$alloc].tbAlloc[1].commonTb.l1Tb.nrOfRateMatchedBits"};
        }
        else
        {
        }
      }
      
      $alloc++;
    }
  }
  elsif($settings{showallsf})
  {
    my $sfn = $value{'header.sfn'};
    my $sf = $value{'header.subframeNr'};
    my $ueRef = -1;
    
    if(flushData($cellId, $sfn, $sf, $ueRef, "dl_alloc"))
    {
      $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
      $saved{$cellId, $sfn, $sf, $ueRef, 'nrOfUe'} = 0;
    }
  }
}

# Example:
#
# UpUlMacPeCiUlUeAllocIndS {
#   sigNo = 23070209
#   header {
#     cellId = 1
#     sfn = 669
#     subFrameNo = 3
#   }
#   noOfUeAllocations = 1
#   ueAllocList[0] {
#     common {
#       clientRef = 16777216
#       crnti = 138
#     }
#     l1 {
#       ulHarqProcessId = 5
#       rvIdx = 0
#       newDataFlag = 1
#       qm = 4
#       tbs = 13536
#       dmRsCyclicShift = 0
#       prbListStart = 1
#       prbListEnd = 45
#       fh = 0
#       cfrInfo { ri = 0, cfrLength = 0, cfrFormat = 0, cfrValid = 0, cfrExpected = 0, cfrCrcFlag = 0 }
#       dlHarqAllocInfo { dlHarqIndExpected = 0, nrOfTb = 0, dlHarqProcessId = 0, swapFlag = 0 }
#       masterRef_p = 0
#       cmCbData_p = 0x00170000
#     }
#     isLastTransmission = 0 (0)
#   }
# }

sub UpUlMacPeCiUlUeAllocIndS
{
  if(!defined $sourceVisible{ul_alloc}) {return;}

  readAttributeData();
  my $cellId = $value{'header.cellId'};

  if($value{'noOfUeAllocations'} > 0)
  {
    my $sfn = $value{'header.sfn'};
    my $sf = $value{'header.subFrameNo'};
    
    my $alloc = 0;
    while(defined $value{"ueAllocList[$alloc].common.clientRef"})
    {
      my $ueRef = sprintf("%x", $value{"ueAllocList[$alloc].common.clientRef"});
      
      if(flushData($cellId, $sfn, $sf, $ueRef, "ul_alloc"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;

        $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrb'} = $value{"ueAllocList[$alloc].l1.prbListEnd"} - $value{"ueAllocList[$alloc].l1.prbListStart"} + 1;
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrbStart'} = $value{"ueAllocList[$alloc].l1.prbListStart"};
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrbEnd'} = $value{"ueAllocList[$alloc].l1.prbListEnd"};
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulTbs'} = $value{"ueAllocList[$alloc].l1.tbs"};
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulModulation'} = getUlModulationFromQm($value{"ueAllocList[$alloc].l1.qm"});
        if($settings{numerical})
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulNdf'} = $value{"ueAllocList[$alloc].l1.newDataFlag"} ? 1 : 0;
        }
        else
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulNdf'} = $value{"ueAllocList[$alloc].l1.newDataFlag"} ? "Y" : "N";
        }
      }

      $alloc++;
    }
  }
}


# Examples:
#
# UpUlMacPeCiUlL1Meas2DlIndS {
#   sigNo = 23070220
#   header {
#     cellId = 1
#     sfn = 669
#     subFrameNo = 1
#   }
#   nrOfPuschReports = 1
#   nrOfPucchReports = 0
#   totalNrOfReports = 1
#   reportList[0] {
#     puschReport {
#       meas2DlUlReportType = 0
#       bbUeRef = 16777216
#       isDtx { isDtx = 0 }
#       dlHarqInfo { dlHarqValid = 0, detectedHarqIndication = 7, dlHarqProcessId = 511, nrOfTb = 0, swapFlag = 0 }
#       timingAdvanceError { timingAdvanceError = 0 }
#       cfrPusch { cfrInfo { ri = 0, cfrLength = 0, cfrFormat = 0, cfrValid = 0, cfrExpected = 0, cfrCrcFlag = 0 }, cfr[] = [0, 0, 0, 0] as hex: [00 00 00 00 00 00 00 00] }
#     }
#   }
# }
#
# UpUlMacPeCiUlL1Meas2DlIndS {
#   sigNo = 23070220
#   header {
#     cellId = 1
#     sfn = 669
#     subFrameNo = 4
#   }
#   nrOfPuschReports = 0
#   nrOfPucchReports = 1
#   totalNrOfReports = 1
#   reportList[0] {
#     pucchReport {
#       meas2DlUlReportType = 1
#       bbUeRef = 16777216
#       isDtx { isDtx = 0 }
#       dlHarqInfo { dlHarqValid = 1, detectedHarqIndication = 3, dlHarqProcessId = 6, nrOfTb = 2, swapFlag = 0 }
#       rxPower { prbListStart = 0, prbListEnd = 0, rxPowerReport = -1042, sinr = 0 }
#       timingAdvanceError { timingAdvanceError = 0 }
#       cfrPucch { cfrInfo { ri = 0, cfrLength = 0, cfrFormat = 0, cfrValid = 0, cfrExpected = 0, cfrCrcFlag = 0 }, cfr[] = [0, 0] as hex: [00 00 00 00] }
#     }
#   }
# }

sub UpUlMacPeCiUlL1Meas2DlIndS
{
  # A measurement report for downlink that is sent in uplink. It contains channel feedback
  # reports(CQI, PMI, RI), RX power information, estimated timing advance error, and downlink HARQ acknowledge information.

  if(!defined $sourceVisible{report_dl}) {return;}

  readAttributeData();
  
  my $cellId = $value{'header.cellId'};
  my $sfn = $value{'header.sfn'};
  my $sf = $value{'header.subFrameNo'};
  
  my $i = 0;
  while(defined $value{"reportList[$i].pucchReport.bbUeRef"} || defined $value{"reportList[$i].puschReport.bbUeRef"})
  {
    if(defined $value{"reportList[$i].pucchReport.bbUeRef"})
    {
      my $ueRef = sprintf("%x", $value{"reportList[$i].pucchReport.bbUeRef"});

      if(flushData($cellId, $sfn, $sf, $ueRef, "report_dl"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;

        $saved{$cellId, $sfn, $sf, $ueRef, 'tae'} = defined $value{"reportList[$i].pucchReport.timingAdvanceError.timingAdvanceError"} ?
	  $value{"reportList[$i].pucchReport.timingAdvanceError.timingAdvanceError"} : $value{"reportList[$i].pucchReport.timingAdvanceError"};

        if($value{"reportList[$i].pucchReport.isDtx"} == 1)
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulHarqInfo'} = "DTX";
        }
        
        if($value{"reportList[$i].pucchReport.isDtx"} == 0 || $settings{alwaysShowRxPwr})
        {
          if(defined $value{"reportList[$i].pucchReport.rxPower.rxPowerReport"})
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'rxPwrPucch'} = sprintf("%6.1f", $value{"reportList[$i].pucchReport.rxPower.rxPowerReport"} / 10);
          }
        }

        # ELIB_BBBASE_COMMON_CFR_FORMAT_WCQI, 0, WCQI (Periodic)
        # ELIB_BBBASE_COMMON_CFR_FORMAT_RI, 1, Only RI (Periodic)
        # ELIB_BBBASE_COMMON_CFR_FORMAT_WCQI_WPMI, 2, WCQI &amp; WPMI (Periodic)
        # ELIB_BBBASE_COMMON_CFR_FORMAT_SCQI, 3, SCQI (Aperiodic)
        # ELIB_BBBASE_COMMON_CFR_FORMAT_SCQI_RI, 4, SCQI &amp; RI (Aperiodic)
        # ELIB_BBBASE_COMMON_CFR_FORMAT_WCQI_SPMI_RI, 5, WCQI, SPMI &amp; RI (Aperiodic)
        # ELIB_BBBASE_COMMON_CFR_FORMAT_SCQI_WPMI_RI, 6, SCQI, WPMI &amp; RI (Aperiodic)
        
        if($value{"reportList[$i].pucchReport.cfrPucch.cfrInfo.cfrValid"} == 1 &&
           $value{"reportList[$i].pucchReport.isDtx"} == 0)
        {
          my $cfrFormat = $value{"reportList[$i].pucchReport.cfrPucch.cfrInfo.cfrFormat"};
          if($cfrFormat == 1 || $cfrFormat == 4 ||  $cfrFormat == 5 || $cfrFormat == 6)    # RI, SCQI_RC, WCQI_SPMI_RI, SCQI_WPMI_RI
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'ri'} = $value{"reportList[$i].pucchReport.cfrPucch.cfrInfo.ri"};
          }
          
          if($cfrFormat != 1)
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'cqi'} = ($value{"reportList[$i].pucchReport.cfrPucch.cfr[0]"} & 0xf000) >> 12;
          }
        }

        if($value{"reportList[$i].pucchReport.dlHarqInfo.dlHarqValid"} == 1)
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqProcessId'} = $value{"reportList[$i].pucchReport.dlHarqInfo.dlHarqProcessId"};
          my $detectedHarqIndication = int $value{"reportList[$i].pucchReport.dlHarqInfo.detectedHarqIndication"};
          if($value{"reportList[$i].pucchReport.dlHarqInfo.nrOfTb"} == 2)
          {
            if($settings{numerical})
            {
              $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} = $detectedHarqIndication;
            }
            else
            {
              $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} = $harqFeedbackMimo{$detectedHarqIndication};
            }
            if($detectedHarqIndication == 0)  # N N
            {
              dlHarqFeedback($ueRef, 1);
              dlHarqFeedback($ueRef, 1);
            }
            elsif($detectedHarqIndication == 1 || $detectedHarqIndication == 2)  # N A, A N
            {
              dlHarqFeedback($ueRef, 0);
              dlHarqFeedback($ueRef, 1);
            }
            elsif($detectedHarqIndication == 3)  # A A
            {
              dlHarqFeedback($ueRef, 0);
              dlHarqFeedback($ueRef, 0);
            }
          }
          else
          {
            if($settings{numerical})
            {
              $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} = $detectedHarqIndication;
            }
            else
            {
              $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} = $harqFeedbackSimo{$detectedHarqIndication};
            }
            
            if($detectedHarqIndication == 1) # N
            {
              dlHarqFeedback($ueRef, 0);
            }
            elsif($detectedHarqIndication == 3) # A
            {
              dlHarqFeedback($ueRef, 1);
            }
          }

          if($savedDlHarqAckNacksInWindow{$ueRef} > 0)
          {
            if($settings{numerical})
            {
              $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqBler'} = sprintf("%d", 100 * ($nrOfDlHarqErrorsInWindow{$ueRef} / $savedDlHarqAckNacksInWindow{$ueRef}));
            }
            else
            {
              $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqBler'} = sprintf("%d\%", 100 * ($nrOfDlHarqErrorsInWindow{$ueRef} / $savedDlHarqAckNacksInWindow{$ueRef}));
            }
          }
        }
      }
    }
    elsif(defined $value{"reportList[$i].puschReport.bbUeRef"})
    {
      my $ueRef = sprintf("%x", $value{"reportList[$i].puschReport.bbUeRef"});

      if(flushData($cellId, $sfn, $sf, $ueRef, "report_dl"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;

        $saved{$cellId, $sfn, $sf, $ueRef, 'tae'} = defined $value{"reportList[$i].puschReport.timingAdvanceError.timingAdvanceError"} ?
	  $value{"reportList[$i].puschReport.timingAdvanceError.timingAdvanceError"} : $value{"reportList[$i].puschReport.timingAdvanceError"};

        if($value{"reportList[$i].puschReport.isDtx"} == 1)
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulHarqInfo'} = "DTX";
        }

        if($value{"reportList[$i].puschReport.isDtx"} == 0 || $settings{alwaysShowRxPwr})
        {
          if(defined $value{"reportList[$i].puschReport.rxPower.rxPowerReport"})
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'rxPwrPusch'} = sprintf("%6.1f", $value{"reportList[$i].puschReport.rxPower.rxPowerReport"} / 10);
            $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrb'} = $value{"reportList[$i].puschReport.rxPower.prbListEnd"} - $value{"reportList[$i].puschReport.rxPower.prbListStart"} + 1;
            $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrbStart'} = $value{"reportList[$i].puschReport.rxPower.prbListStart"};
            $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrbEnd'} = $value{"reportList[$i].puschReport.rxPower.prbListEnd"};
          }
        }

        if($value{"reportList[$i].puschReport.cfrPusch.cfrInfo.cfrValid"} == 1 &&
           $value{"reportList[$i].puschReport.isDtx"} == 0 &&
           ($value{"reportList[$i].puschReport.cfrPusch.cfrInfo.cfrFormat"} < 3 ||  # 3 = SCQI
           $value{"reportList[$i].puschReport.cfrPusch.cfrInfo.cfrCrcFlag"} == 1))  # CRC must be true for aperiodic report (cfrFormat >= SCQI)
        {
          my $cfrFormat = $value{"reportList[$i].puschReport.cfrPusch.cfrInfo.cfrFormat"};
          if($cfrFormat == 1 || $cfrFormat == 4 ||  $cfrFormat == 5 || $cfrFormat == 6)    # RI, SCQI_RC, WCQI_SPMI_RI, SCQI_WPMI_RI
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'ri'} = $value{"reportList[$i].puschReport.cfrPusch.cfrInfo.ri"};
          }
          
          if($cfrFormat != 1)
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'cqi'} = ($value{"reportList[$i].puschReport.cfrPusch.cfr[0]"} & 0xf000) >> 12;
          }
        }

        if($value{"reportList[$i].puschReport.dlHarqInfo.dlHarqValid"} == 1)
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqProcessId'} = $value{"reportList[$i].puschReport.dlHarqInfo.dlHarqProcessId"};
          my $detectedHarqIndication = int $value{"reportList[$i].puschReport.dlHarqInfo.detectedHarqIndication"};
          if($value{"reportList[$i].puschReport.dlHarqInfo.nrOfTb"} == 2)
          {
            if($settings{numerical})
            {
              $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} = $detectedHarqIndication;
            }
            else
            {
              $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} = $harqFeedbackMimo{$detectedHarqIndication};
              $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} .= "(s)"; 
            }
            
            if($detectedHarqIndication == 0) # N N
            {
              dlHarqFeedback($ueRef, 1);
              dlHarqFeedback($ueRef, 1);
            }
            elsif($detectedHarqIndication == 1 || $detectedHarqIndication == 2)  # N A, A N
            {
              dlHarqFeedback($ueRef, 0);
              dlHarqFeedback($ueRef, 1);
            }
            elsif($detectedHarqIndication == 3)  # A A
            {
              dlHarqFeedback($ueRef, 0);
              dlHarqFeedback($ueRef, 0);
            }
          }
          else
          {
            if($settings{numerical})
            {
              $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} = $detectedHarqIndication;
            }
            else
            {
              $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} = $harqFeedbackSimo{$detectedHarqIndication};
              $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} .= "(s)"; 
            }
            
            if($detectedHarqIndication == 1) # N
            {
              dlHarqFeedback($ueRef, 0);
            }
            elsif($detectedHarqIndication == 3) # A
            {
              dlHarqFeedback($ueRef, 1);
            }
          }

          if($savedDlHarqAckNacksInWindow{$ueRef} > 0)
          {
            if($settings{numerical})
            {
              $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqBler'} = sprintf("%d", 100 * ($nrOfDlHarqErrorsInWindow{$ueRef} / $savedDlHarqAckNacksInWindow{$ueRef}));
            }
            else
            {
              $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqBler'} = sprintf("%d\%", 100 * ($nrOfDlHarqErrorsInWindow{$ueRef} / $savedDlHarqAckNacksInWindow{$ueRef}));
            }
          }
        }
      }
    }
      
    $i++;
  }
}

#xxxx-xx-xx xx:xx:xx.xxx 0x09801457=(bfn:152, sfn:152, sf:0.07, bf:69) ULMA4/UpcDlMacCeBl_Imtdi BIN_REC : LPP_UP_ULMACPE_CI_UL_L1_MEASRPRT2_DL_IND (646) <=  UNKNOWN (sessionRef=0x182c4c)
#UpUlMacPeCiUlL1Measrprt2DlIndS {
#  sigNo = 23070224
#  header {
#    cellId = 122
#    sfn = 151
#    subFrameNo = 9
#  }
#  nrOfPuschReports = 1
#  nrOfPucchReports = 0
#  nrOfSrsReports = 0
#  puschReportList[0] {
#    bbUeRef = 2046820384 (0x7a000020)
#    isDtx {
#      isDtx = 0
#    }
#    timingAdvanceError {
#      timingAdvanceError = 0
#    }
#    cfrPusch[0] {
#      cfrInfo { ri = 1, cfrLength = 0, cfrFormat = 0, cfrValid = 0, cfrExpected = 0, cfrCrcFlag = 0, dlBandwidth = 50 }
#      cfr[] = [0, 0, 0, 0]dec
#              [00 00 00 00 00 00 00 00]hex
#    }
#    cfrPusch[1] {
#      cfrInfo { ri = 0, cfrLength = 0, cfrFormat = 0, cfrValid = 0, cfrExpected = 0, cfrCrcFlag = 0, dlBandwidth = 0 }
#      cfr[] = [0, 0, 0, 0]dec
#              [00 00 00 00 00 00 00 00]hex
#    }
#    beamformingIndex {
#      beam0Index = 0
#      beam1Index = 0
#      polarizationIndex = 0
#      valid = 0
#      padding0 = 0
#    }
#  }
#}
#xxxx-xx-xx xx:xx:xx.xxx 0x09c20b56=(bfn:156, sfn:156, sf:2.13, bf:181) ULMA4/UpcDlMacCeBl_Imtdi BIN_REC : LPP_UP_ULMACPE_CI_UL_L1_MEASRPRT2_DL_IND (646) <=  UNKNOWN (sessionRef=0x182c4c)
#UpUlMacPeCiUlL1Measrprt2DlIndS {
#  sigNo = 23070224
#  header {
#    cellId = 122
#    sfn = 156
#    subFrameNo = 1
#  }
#  nrOfPuschReports = 0
#  nrOfPucchReports = 1
#  nrOfSrsReports = 0
#  pucchReportList[0] {
#    bbUeRef = 2046820384 (0x7a000020)
#    pucchInfo[0] {
#      dlHarqValid = 0
#      nrOfTb = 0
#      padding0 = 0
#    }
#    pucchInfo[1] {
#      dlHarqValid = 0
#      nrOfTb = 0
#      padding0 = 0
#    }
#    isDtx {
#      isDtx = 1
#    }
#    rxPower {
#      prbListStart = 0
#      prbListEnd = 0
#      rxPowerReport = -1373
#      sinr = -450
#    }
#    cfrPucch {
#      cfrInfo { ri = 0, cfrLength = 0, cfrFormat = 0, cfrValid = 0, cfrExpected = 0, cfrCrcFlag = 0, dlBandwidth = 0 }
#      cfr[] = [0, 0]dec
#              [00 00 00 00]hex
#    }
#    cfrCarrierNo = 0
#  }
#}

sub UpUlMacPeCiUlL1Measrprt2DlIndS
{
  # A measurement report for downlink that is sent in uplink. It contains channel feedback
  # reports(CQI, PMI, RI), RX power information, estimated timing advance error, and downlink HARQ acknowledge information.

  if(!defined $sourceVisible{report_dl2}) {return;}

  readAttributeData();
  
  my $cellId = $value{'header.cellId'};
  my $sfn = $value{'header.sfn'};
  my $sf = $value{'header.subFrameNo'};
  
  my $i = 0;
  while(defined $value{"pucchReportList[$i].bbUeRef"})
  {
    my $ueRef = sprintf("%x", $value{"pucchReportList[$i].bbUeRef"});

    if(flushData($cellId, $sfn, $sf, $ueRef, "report_dl2"))
    {
      $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;

      $saved{$cellId, $sfn, $sf, $ueRef, 'tae'} = defined $value{"pucchReportList[$i].timingAdvanceError.timingAdvanceError"} ?
        $value{"pucchReportList[$i].timingAdvanceError.timingAdvanceError"} : $value{"pucchReportList[$i].timingAdvanceError"};

      my $isDtx = 0;
      if($value{"pucchReportList[$i].isDtx"} == 1 || $value{"pucchReportList[$i].isDtx.isDtx"} == 1)
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulHarqInfo'} = "DTX";
	$isDtx = 1;
      }
        
      if(!$isDtx || $settings{alwaysShowRxPwr})
      {
        if(defined $value{"pucchReportList[$i].rxPower.rxPowerReport"})
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'rxPwrPucch'} = sprintf("%6.1f", $value{"pucchReportList[$i].rxPower.rxPowerReport"} / 10);
        }
      }

      # ELIB_BBBASE_COMMON_CFR_FORMAT_WCQI, 0, WCQI (Periodic)
      # ELIB_BBBASE_COMMON_CFR_FORMAT_RI, 1, Only RI (Periodic)
      # ELIB_BBBASE_COMMON_CFR_FORMAT_WCQI_WPMI, 2, WCQI &amp; WPMI (Periodic)
      # ELIB_BBBASE_COMMON_CFR_FORMAT_SCQI, 3, SCQI (Aperiodic)
      # ELIB_BBBASE_COMMON_CFR_FORMAT_SCQI_RI, 4, SCQI &amp; RI (Aperiodic)
      # ELIB_BBBASE_COMMON_CFR_FORMAT_WCQI_SPMI_RI, 5, WCQI, SPMI &amp; RI (Aperiodic)
      # ELIB_BBBASE_COMMON_CFR_FORMAT_SCQI_WPMI_RI, 6, SCQI, WPMI &amp; RI (Aperiodic)
        
      if($value{"pucchReportList[$i].cfrPucch.cfrInfo.cfrValid"} == 1 && !$isDtx)
      {
        my $cfrFormat = $value{"pucchReportList[$i].cfrPucch.cfrInfo.cfrFormat"};
        if($cfrFormat == 1 || $cfrFormat == 4 ||  $cfrFormat == 5 || $cfrFormat == 6)    # RI, SCQI_RC, WCQI_SPMI_RI, SCQI_WPMI_RI
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'ri'} = $value{"pucchReportList[$i].cfrPucch.cfrInfo.ri"};
        }
        
        if($cfrFormat != 1)
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'cqi'} = ($value{"pucchReportList[$i].cfrPucch.cfr[0]"} & 0xf000) >> 12;
        }
      }
    }

    $i++;
  }

  my $i = 0;
  while(defined $value{"puschReportList[$i].bbUeRef"})
  {
    my $ueRef = sprintf("%x", $value{"puschReportList[$i].bbUeRef"});

    if(flushData($cellId, $sfn, $sf, $ueRef, "report_dl2"))
    {
      $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;

      $saved{$cellId, $sfn, $sf, $ueRef, 'tae'} = defined $value{"puschReportList[$i].timingAdvanceError.timingAdvanceError"} ?
        $value{"puschReportList[$i].timingAdvanceError.timingAdvanceError"} : $value{"puschReportList[$i].timingAdvanceError"};

      my $isDtx = 0;
      if($value{"puschReportList[$i].isDtx"} == 1 || $value{"puschReportList[$i].isDtx.isDtx"} == 1)
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulHarqInfo'} = "DTX";
	my $isDtx = 1;
      }

      if(!$isDtx || $settings{alwaysShowRxPwr})
      {
        if(defined $value{"puschReportList[$i].rxPower.rxPowerReport"})
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'rxPwrPusch'} = sprintf("%6.1f", $value{"puschReportList[$i].rxPower.rxPowerReport"} / 10);
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrb'} = $value{"puschReportList[$i].rxPower.prbListEnd"} - $value{"puschReportList[$i].rxPower.prbListStart"} + 1;
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrbStart'} = $value{"puschReportList[$i].rxPower.prbListStart"};
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrbEnd'} = $value{"puschReportList[$i].rxPower.prbListEnd"};
        }
      }

      if(!$isDtx)
      {
        # new style with several cfr
        my $j = 0;
        while(defined $value{"puschReportList[$i].cfrPusch[$j].cfrInfo.cfrValid"})
        {
          if($value{"puschReportList[$i].cfrPusch[$j].cfrInfo.cfrValid"} == 1 &&
            ($value{"puschReportList[$i].cfrPusch[$j].cfrInfo.cfrFormat"} < 3 ||  # 3 = SCQI
             $value{"puschReportList[$i].cfrPusch[$j].cfrInfo.cfrCrcFlag"} == 1))  # CRC must be true for aperiodic report (cfrFormat >= SCQI)
          {
            my $cfrFormat = $value{"puschReportList[$i].cfrPusch[$j].cfrInfo.cfrFormat"};
            if($cfrFormat == 1 || $cfrFormat == 4 ||  $cfrFormat == 5 || $cfrFormat == 6)    # RI, SCQI_RC, WCQI_SPMI_RI, SCQI_WPMI_RI
            {
              $saved{$cellId, $sfn, $sf, $ueRef, 'ri'} = $value{"puschReportList[$i].cfrPusch[$j].cfrInfo.ri"};
            }
        
            if($cfrFormat != 1)
            {
              $saved{$cellId, $sfn, $sf, $ueRef, 'cqi'} = ($value{"puschReportList[$i].cfrPusch[$j].cfr[0]"} & 0xf000) >> 12;
            }
          }
	  $j++;
        }

        # old style with only one cfr
        if($value{"puschReportList[$i].cfrPusch.cfrInfo.cfrValid"} == 1 &&
          ($value{"puschReportList[$i].cfrPusch.cfrInfo.cfrFormat"} < 3 ||  # 3 = SCQI
           $value{"puschReportList[$i].cfrPusch.cfrInfo.cfrCrcFlag"} == 1))  # CRC must be true for aperiodic report (cfrFormat >= SCQI)
        {
          my $cfrFormat = $value{"puschReportList[$i].cfrPusch.cfrInfo.cfrFormat"};
          if($cfrFormat == 1 || $cfrFormat == 4 ||  $cfrFormat == 5 || $cfrFormat == 6)    # RI, SCQI_RC, WCQI_SPMI_RI, SCQI_WPMI_RI
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'ri'} = $value{"puschReportList[$i].cfrPusch.cfrInfo.ri"};
          }
        
          if($cfrFormat != 1)
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'cqi'} = ($value{"puschReportList[$i].cfrPusch.cfr[0]"} & 0xf000) >> 12;
          }
	}
      }
    }
      
    $i++;
  }
}

# Example:
#
#[2012-08-15 21:32:02.098393] 0x3897a89e=(bfn:905, sfn:905, sf:8.13, bf:137) ULMA4/UpcDlMacCeBl_Imtdi BIN_REC : LPP_UP_ULMACPE_CI_UL_L1_HARQFDBK2_DL_IND (647) <=  UNKNOWN (sessionRef=0x183368)
#UpUlMacPeCiUlL1Harqfdbk2DlIndS {
#  sigNo = 23070225
#  header {
#    cellId = 122
#    sfn = 905
#    subFrameNo = 7
#  }
#  nrOfPuschReports = 0
#  nrOfPucchReports = 1
#  pucchHarqReportList[0] {
#    cfrCarrierNo = 0
#    bbUeRef = 2046820384 (0x7a000020)
#    dlHarqInfo[0] {
#      dlHarqValid = 1
#      detectedHarqIndication = 1
#      dlHarqProcessId = 3
#      nrOfTb = 1
#      padding0 = 0
#    }
#    dlHarqInfo[1] {
#      dlHarqValid = 0
#      detectedHarqIndication = 4
#      dlHarqProcessId = 0
#      nrOfTb = 0
#      padding0 = 0
#    }
#  }
#}

sub UpUlMacPeCiUlL1Harqfdbk2DlIndS
{
  # A measurement report for downlink that is sent in uplink. It contains channel feedback
  # reports(CQI, PMI, RI), RX power information, estimated timing advance error, and downlink HARQ acknowledge information.

  if(!defined $sourceVisible{harq_dl}) {return;}

  readAttributeData();
  
  my $cellId = $value{'header.cellId'};
  my $sfn = $value{'header.sfn'};
  my $sf = $value{'header.subFrameNo'};
  
  my $i = 0;
  while(defined $value{"pucchHarqReportList[$i].bbUeRef"})
  {
    my $ueRef = sprintf("%x", $value{"pucchHarqReportList[$i].bbUeRef"});

    # currently only dlHarqInfo[0] is checked
    if($value{"pucchHarqReportList[$i].dlHarqInfo[0].dlHarqValid"} == 1)
    {
      if(flushData($cellId, $sfn, $sf, $ueRef, "harq_dl"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
	
        $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqProcessId'} = $value{"pucchHarqReportList[$i].dlHarqInfo[0].dlHarqProcessId"};
        my $detectedHarqIndication = int $value{"pucchHarqReportList[$i].dlHarqInfo[0].detectedHarqIndication"};
        if($value{"pucchHarqReportList[$i].dlHarqInfo[0].nrOfTb"} == 2)
        {
          if($settings{numerical})
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} = $detectedHarqIndication;
          }
          else
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} = $harqFeedbackMimo{$detectedHarqIndication};
          }
          if($detectedHarqIndication == 0)  # N N
          {
            dlHarqFeedback($ueRef, 1);
            dlHarqFeedback($ueRef, 1);
          }
          elsif($detectedHarqIndication == 1 || $detectedHarqIndication == 2)  # N A, A N
          {
            dlHarqFeedback($ueRef, 0);
            dlHarqFeedback($ueRef, 1);
          }
          elsif($detectedHarqIndication == 3)  # A A
          {
            dlHarqFeedback($ueRef, 0);
            dlHarqFeedback($ueRef, 0);
          }
        }
        else
        {
          if($settings{numerical})
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} = $detectedHarqIndication;
          }
          else
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} = $harqFeedbackSimo{$detectedHarqIndication};
          }
          
          if($detectedHarqIndication == 1) # N
          {
            dlHarqFeedback($ueRef, 0);
          }
          elsif($detectedHarqIndication == 3) # A
          {
            dlHarqFeedback($ueRef, 1);
          }
        }

        if($savedDlHarqAckNacksInWindow{$ueRef} > 0)
        {
          if($settings{numerical})
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqBler'} = sprintf("%d", 100 * ($nrOfDlHarqErrorsInWindow{$ueRef} / $savedDlHarqAckNacksInWindow{$ueRef}));
          }
          else
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqBler'} = sprintf("%d\%", 100 * ($nrOfDlHarqErrorsInWindow{$ueRef} / $savedDlHarqAckNacksInWindow{$ueRef}));
          }
        }
      }
    }

    $i++;
  }

  my $i = 0;
  while(defined $value{"puschHarqReportList[$i].bbUeRef"})
  {
    my $ueRef = sprintf("%x", $value{"puschHarqReportList[$i].bbUeRef"});

    # currently only dlHarqInfo[0] is checked
    if($value{"puschHarqReportList[$i].dlHarqInfo[0].dlHarqValid"} == 1)
    {
      if(flushData($cellId, $sfn, $sf, $ueRef, "harq_dl"))
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
        $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;

        $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqProcessId'} = $value{"puschHarqReportList[$i].dlHarqInfo[0].dlHarqProcessId"};
        my $detectedHarqIndication = int $value{"puschHarqReportList[$i].dlHarqInfo[0].detectedHarqIndication"};
        if($value{"puschHarqReportList[$i].dlHarqInfo[0].nrOfTb"} == 2)
        {
          if($settings{numerical})
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} = $detectedHarqIndication;
          }
          else
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} = $harqFeedbackMimo{$detectedHarqIndication};
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} .= "(s)"; 
          }
          
          if($detectedHarqIndication == 0) # N N
          {
            dlHarqFeedback($ueRef, 1);
            dlHarqFeedback($ueRef, 1);
          }
          elsif($detectedHarqIndication == 1 || $detectedHarqIndication == 2)  # N A, A N
          {
            dlHarqFeedback($ueRef, 0);
            dlHarqFeedback($ueRef, 1);
          }
          elsif($detectedHarqIndication == 3)  # A A
          {
            dlHarqFeedback($ueRef, 0);
            dlHarqFeedback($ueRef, 0);
          }
        }
        else
        {
          if($settings{numerical})
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} = $detectedHarqIndication;
          }
          else
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} = $harqFeedbackSimo{$detectedHarqIndication};
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqIndication'} .= "(s)"; 
          }
          
          if($detectedHarqIndication == 1) # N
          {
            dlHarqFeedback($ueRef, 0);
          }
          elsif($detectedHarqIndication == 3) # A
          {
            dlHarqFeedback($ueRef, 1);
          }
        }

        if($savedDlHarqAckNacksInWindow{$ueRef} > 0)
        {
          if($settings{numerical})
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqBler'} = sprintf("%d", 100 * ($nrOfDlHarqErrorsInWindow{$ueRef} / $savedDlHarqAckNacksInWindow{$ueRef}));
          }
          else
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqBler'} = sprintf("%d\%", 100 * ($nrOfDlHarqErrorsInWindow{$ueRef} / $savedDlHarqAckNacksInWindow{$ueRef}));
          }
        }
      }
    }
      
    $i++;
  }
}

# Example:
#
# UpUlMacPeCiUlL1Meas2UlIndS {
#   sigNo = 23070219
#   header {
#     cellId = 1
#     sfn = 670
#     subFrameNo = 5
#   }
#   nrOfPuschReports = 1
#   nrOfPucchSrReports = 1
#   totalNrOfReports = 2
#   reportList[0] {
#     puschReport {
#       meas2DlUlReportType = 2
#       bbUeRef = 16777216
#       isDtx { isDtx = 0 }
#       rxPower { prbListStart = 1, prbListEnd = 45, rxPowerReport = -827, sinr = 1084495829 }
#     }
#   }
#   reportList[1] {
#     pucchSrReport {
#       meas2DlUlReportType = 3 (ElibBbBaseCommonMeas2UlPucchSrReport)
#       bbUeRef = 285212896
#     }
#   }
# }

sub UpUlMacPeCiUlL1Meas2UlIndS
{
  # For received power reporting and/or scheduling requests. 

  if(!defined $sourceVisible{report_ul}) {return;}

  readAttributeData();

  my $cellId = $value{'header.cellId'};
  my $sfn = $value{'header.sfn'};
  my $sf = $value{'header.subFrameNo'};

  my $i = 0;
  while(defined $value{"reportList[$i].pucchReport.bbUeRef"} ||
        defined $value{"reportList[$i].puschReport.bbUeRef"} ||
        defined $value{"reportList[$i].pucchSrReport.bbUeRef"})
  {
    my $ueRef = -1;
    my $isDtx = 0;
    
    if(defined $value{"reportList[$i].pucchReport.bbUeRef"})
    {
      $ueRef = sprintf("%x", $value{"reportList[$i].pucchReport.bbUeRef"});
      $isDtx = $value{"reportList[$i].pucchReport.isDtx.isDtx"};
    }
    elsif(defined $value{"reportList[$i].puschReport.bbUeRef"})
    {
      $ueRef = sprintf("%x", $value{"reportList[$i].puschReport.bbUeRef"});
      $isDtx = $value{"reportList[$i].puschReport.isDtx.isDtx"};
    }
    elsif(defined $value{"reportList[$i].pucchSrReport.bbUeRef"})
    {
      $ueRef = sprintf("%x", $value{"reportList[$i].pucchSrReport.bbUeRef"});
    }

    if(flushData($cellId, $sfn, $sf, $ueRef, "report_ul"))
    {
      $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
    
      if($isDtx)
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulHarqInfo'} = "DTX";
      }

      if(defined $value{"reportList[$i].pucchReport.rxPower.prbListEnd"})
      {
        if(!$isDtx || $settings{alwaysShowRxPwr})
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'rxPwrPucch'} = sprintf("%6.1f", $value{"reportList[$i].pucchReport.rxPower.rxPowerReport"} / 10);
          # old before 12.2: $saved{$cellId, $sfn, $sf, $ueRef, 'sinr'} = int(10 * log10($value{"reportList[$i].pucchReport.rxPower.sinr"} / $power22));
          $saved{$cellId, $sfn, $sf, $ueRef, 'sinr'} = int($value{"reportList[$i].pucchReport.rxPower.sinr"} / 10);
        }
      }
      elsif(defined $value{"reportList[$i].puschReport.rxPower.prbListEnd"})
      {
        if(!$isDtx || $settings{alwaysShowRxPwr})
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'rxPwrPusch'} = sprintf("%6.1f", $value{"reportList[$i].puschReport.rxPower.rxPowerReport"} / 10);
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrb'} = $value{"reportList[$i].puschReport.rxPower.prbListEnd"} - $value{"reportList[$i].puschReport.rxPower.prbListStart"} + 1;
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrbStart'} = $value{"reportList[$i].puschReport.rxPower.prbListStart"};
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrbEnd'} = $value{"reportList[$i].puschReport.rxPower.prbListEnd"};
	  # old before 12.2: $saved{$cellId, $sfn, $sf, $ueRef, 'sinr'} = int(10 * log10($value{"reportList[$i].puschReport.rxPower.sinr"} / $power22));
          $saved{$cellId, $sfn, $sf, $ueRef, 'sinr'} = int($value{"reportList[$i].puschReport.rxPower.sinr"} / 10);
        }
      }
      elsif(defined $value{"reportList[$i].pucchSrReport.bbUeRef"})
      {
        if($settings{numerical})
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'sr'} = 1;
        }
        else
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'sr'} = "Y";
        }
      }
    }
    
    $i++;
  }
}

#xxxx-xx-xx xx:xx:xx.xxx 0x08e0106f=(bfn:142, sfn:142, sf:0.07, bf:6) ULMA4/UpcUlMacCeBl_Imtdi BIN_REC : LPP_UP_ULMACPE_CI_UL_L1_MEASRPRT2_UL_IND (652) <=  UNKNOWN (sessionRef=0x184ba0)
#UpUlMacPeCiUlL1Measrprt2UlIndS {
#  sigNo = 23070222
#  header {
#    cellId = 122
#    sfn = 141
#    subFrameNo = 9
#  }
#  nrOfSrsReports = 0
#  nrOfRxPowerPerPrb = 50
#  nrOfPuschReports = 1
#  nrOfPucchSrReports = 0
#  puschRxPowerPerPrbList[] = [255, -1, -988, -987, 352, 1287, 0, 122, 141, 3, 50, -1197, 300, 0, -1500, -1500, -1198, -1202, -1198, -1196, -1193, -1198, -1198, -1191, -1200, -1192, -1185, -1198, -1194, -1189, -1196, -1193, -1185, -1196, -1190, -1190, -1193, -1208, -1197, -1198, -1201, -1191, -1197, -1190, -1207, -1197, -1201, -1199, -1203, -1212]dec
#                             [00 ff ff ff fc 24 fc 25 01 60 05 07 00 00 00 7a 00 8d 00 03 00 32 fb 53 01 2c 00 00 fa 24 fa 24 fb 52 fb 4e fb 52 fb 54 fb 57 fb 52 fb 52 fb 59 fb 50 fb 58 fb 5f fb 52 fb 56 fb 5b fb 54 fb 57 fb 5f fb 54 fb 5a fb 5a fb 57 fb 48 fb 53 fb 52 fb 4f fb 59 fb 53 fb 5a fb 49 fb 53 fb 4f fb 51 fb 4d fb 44]hex
#  puschReportList[0] {
#    bbUeRef = 2046820384 (0x7a000020)
#    isDtx {
#      isDtx = 0
#    }
#    rxPower {
#      prbListStart = 2
#      prbListEnd = 3
#      rxPowerReport = -987
#      sinr = 243
#    }
#  }
#}
#xxxx-xx-xx xx:xx:xx.xxx 0x0a720bcd=(bfn:167, sfn:167, sf:2.13, bf:188) ULMA4/UpcUlMacCeBl_Imtdi BIN_REC : LPP_UP_ULMACPE_CI_UL_L1_MEASRPRT2_UL_IND (652) <=  UNKNOWN (sessionRef=0x184ba0)
#UpUlMacPeCiUlL1Measrprt2UlIndS {
#  sigNo = 23070222
#  header {
#    cellId = 122
#    sfn = 167
#    subFrameNo = 1
#  }
#  nrOfSrsReports = 0
#  nrOfRxPowerPerPrb = 50
#  nrOfPuschReports = 0
#  nrOfPucchSrReports = 1
#  puschRxPowerPerPrbList[] = [-1500, -1500, -1197, -1192, -1190, -1190, -1198, -1181, -1204, -1207, -1205, -1196, -1198, -1199, -1202, -1197, -1206, -1199, -1193, -1197, -1212, -1195, -1191, -1193, -1199, -1197, -1200, -1195, -1202, -1201, -1202, -1191, -1191, -1210, -1206, -1198, -1197, -1198, -1206, -1206, -1197, -1195, -1204, -1199, -1194, -1198, -1189, -1196, -1500, -1500]dec
#                             [fa 24 fa 24 fb 53 fb 58 fb 5a fb 5a fb 52 fb 63 fb 4c fb 49 fb 4b fb 54 fb 52 fb 51 fb 4e fb 53 fb 4a fb 51 fb 57 fb 53 fb 44 fb 55 fb 59 fb 57 fb 51 fb 53 fb 50 fb 55 fb 4e fb 4f fb 4e fb 59 fb 59 fb 46 fb 4a fb 52 fb 53 fb 52 fb 4a fb 4a fb 53 fb 55 fb 4c fb 51 fb 56 fb 52 fb 5b fb 54 fa 24 fa 24]hex
#  pucchSrReportList[0] {
#    bbUeRef = 2046820384 (0x7a000020)
#  }
#}

sub UpUlMacPeCiUlL1Measrprt2UlIndS
{
  # For received power reporting and/or scheduling requests. 

  if(!defined $sourceVisible{report_ul}) {return;}

  readAttributeData();

  my $cellId = $value{'header.cellId'};
  my $sfn = $value{'header.sfn'};
  my $sf = $value{'header.subFrameNo'};

  my $i = 0;
  while(defined $value{"pucchReportList[$i].bbUeRef"})
  {
    my $ueRef = sprintf("%x", $value{"pucchReportList[$i].bbUeRef"});
    my $isDtx = $value{"pucchReportList[$i].isDtx.isDtx"};

    if(flushData($cellId, $sfn, $sf, $ueRef, "report_ul"))
    {
      $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;

      if($isDtx)
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulHarqInfo'} = "DTX";
      }

      if(!$isDtx || $settings{alwaysShowRxPwr})
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'rxPwrPucch'} = sprintf("%6.1f", $value{"pucchReportList[$i].rxPower.rxPowerReport"} / 10);
        $saved{$cellId, $sfn, $sf, $ueRef, 'sinr'} = int($value{"pucchReportList[$i].rxPower.sinr"} / 10);
      }
    }

    $i++;
  }

  my $i = 0;
  while(defined $value{"puschReportList[$i].bbUeRef"})
  {
    my $ueRef = sprintf("%x", $value{"puschReportList[$i].bbUeRef"});
    my $isDtx = $value{"puschReportList[$i].isDtx.isDtx"};

    if(flushData($cellId, $sfn, $sf, $ueRef, "report_ul"))
    {
      $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;

      if($isDtx)
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulHarqInfo'} = "DTX";
      }
     
      if(!$isDtx || $settings{alwaysShowRxPwr})
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'rxPwrPusch'} = sprintf("%6.1f", $value{"puschReportList[$i].rxPower.rxPowerReport"} / 10);
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrb'} = $value{"puschReportList[$i].rxPower.prbListEnd"} - $value{"puschReportList[$i].rxPower.prbListStart"} + 1;
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrbStart'} = $value{"puschReportList[$i].rxPower.prbListStart"};
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrbEnd'} = $value{"puschReportList[$i].rxPower.prbListEnd"};
        $saved{$cellId, $sfn, $sf, $ueRef, 'sinr'} = int($value{"puschReportList[$i].rxPower.sinr"} / 10);
      }
    }

    $i++;
  }

  my $i = 0;
  while(defined $value{"pucchSrReportList[$i].bbUeRef"})
  {
    my $ueRef = sprintf("%x", $value{"pucchSrReportList[$i].bbUeRef"});

    if(flushData($cellId, $sfn, $sf, $ueRef, "report_ul"))
    {
      $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
      
      if($settings{numerical})
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'sr'} = 1;
      }
      else
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'sr'} = "Y";
      }
    }

    $i++;
  }
}

# Example:
#
# UpUlCellPeCiCellStatusReportIndS {
#   sigNo = 23069959
#   cellId = 1
#   sfn = 671
#   subFrameNo = 5
#   interferencePower = -1171
# }

sub UpUlCellPeCiCellStatusReportIndS
{
  # Interferance power reports
  
  if(!defined $sourceVisible{cell_report}) {return;}

  readAttributeData();
  
  my $cellId = $value{cellId};
  my $sfn = $value{'sfn'};
  my $sf = $value{'subFrameNo'};
  my $ueRef = -1;

  if(flushData($cellId, $sfn, $sf, $ueRef, "cell_report"))
  {
    $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
    $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
    $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
    $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
    $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;

    if(defined $value{'interferencePower'})
    {
      $saved{$cellId, $sfn, $sf, $ueRef, 'interferancePwrPusch'} = sprintf("%6.1f", $value{'interferencePower'} / 10);
    }
    else
    {
      $saved{$cellId, $sfn, $sf, $ueRef, 'interferancePwrPusch'} = sprintf("%6.1f", $value{'puschIntNoisePwr'} / 10);
      $saved{$cellId, $sfn, $sf, $ueRef, 'interferancePwrPucch'} = sprintf("%6.1f", $value{'pucchIntNoisePwr'} / 10);
    }
  }
}


# Example:
#
# UpUlMacPeCiUlMacCtrlInfoIndS {
#   sigNo = 431
#   header {
#     cellId = 1
#     sfn = 672
#     subFrameNo = 8
#   }
#   payloadSize = 21
#   nrOfUeUlMacCtrlInfo = 1
#   ueUlMacCtrlInfo[0] {
#     header {
#       crnti = 0
#       sessionRef = 16777216
#       harqInfo = 1 (UpUpCommonMacCommonMacCtrlElemHarqFeedbackAck)
#       isDtx = 0 (0)
#       prbListStart = 1
#       prbListEnd = 40
#       ulHarqProcessId = 0
#       nrOfSduInfos = 2
#       nrOfMacCtrlElements = 1
#       size = 21
#     }
#     dummyNrOfSduInfos = 0
#     dummyNrOfMacCtrlElements = 0
#     sduInfoList[0] {
#       lcid = 3
#       receivedBytes = 2
#     }
#     sduInfoList[1] {
#       lcid = 3
#       receivedBytes = 1829
#     }
#     macCtrlElementList[0] {
#       type = 6 (UpUpCommonMacCommonMacCtrlElemShortBsr)
#       powerHeadroomReport { type = 6 (UpUpCommonMacCommonMacCtrlElemShortBsr), powerHeadroom = 126 }
#       cRnti { type = 6 (UpUpCommonMacCommonMacCtrlElemShortBsr), crnti = 8257536 }
#       truncatedBSR { type = 6 (UpUpCommonMacCommonMacCtrlElemShortBsr), bufferSize = 126 }
#       shortBSR { type = 6 (UpUpCommonMacCommonMacCtrlElemShortBsr), bufferSize = 126 }
#       longBSR { type = 6 (UpUpCommonMacCommonMacCtrlElemShortBsr), bufferSizeNr1Nr2 = 126, bufferSizeNr3Nr4 = 0 }
#     }
#   }
# }

sub UpUlMacPeCiUlMacCtrlInfoIndS
{
  # This bundled signal includes a list of all MAC control elements and SDU informaton from all scheduled UE
  # and Msg 3 sessions belonging to this cell and for this sub-frame
  
  if(!defined $sourceVisible{mac_ctrl}) {return;}

  readAttributeData();

  my $cellId = $value{'header.cellId'};
  my $sfn = $value{'header.sfn'};
  my $sf = $value{'header.subFrameNo'};
  
  my $ctrlInfo = 0;
  while(defined $value{"ueUlMacCtrlInfo[$ctrlInfo].header.sessionRef"})
  {
    my $ueRef = sprintf("%x", $value{"ueUlMacCtrlInfo[$ctrlInfo].header.sessionRef"});
    my $isDtx = $value{"ueUlMacCtrlInfo[$ctrlInfo].header.isDtx"};

    if(flushData($cellId, $sfn, $sf, $ueRef, "mac_ctrl"))
    {
      $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;
      
      if($isDtx == 1)
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulHarqInfo'} = "DTX";
      }
      else
      {
        my $harqInfo = $value{"ueUlMacCtrlInfo[$ctrlInfo].header.harqInfo"};
        if($settings{numerical})
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulHarqInfo'} = $harqInfo ? 1 : 0;
        }
        else
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'ulHarqInfo'} = $harqInfo ? "A" : "N";
        }
        ulHarqFeedback($ueRef, 1 - $harqInfo);  # 0 = N, 1 = A
        if($savedUlHarqAckNacksInWindow{$ueRef} > 0)
        {
          if($settings{numerical})
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'ulHarqBler'} = sprintf("%d", 100 * ($nrOfUlHarqErrorsInWindow{$ueRef} / $savedUlHarqAckNacksInWindow{$ueRef}));
          }
          else
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'ulHarqBler'} = sprintf("%d\%", 100 * ($nrOfUlHarqErrorsInWindow{$ueRef} / $savedUlHarqAckNacksInWindow{$ueRef}));
          }
        }
      }

      # ltng's format:
      if(defined $value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList.powerHeadroomReport.type"})  # type = 3
      {
        # first 2 bits is reserved, 6 lsb bits is phr according to 3gpp 36.133 Table 9.1.8.4-1
        $saved{$cellId, $sfn, $sf, $ueRef, 'phr'} = getPowerHeadroomInDb($value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList.powerHeadroomReport.powerHeadroom"} & 0x3f);
      }
      if(defined $value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList.truncatedBSR.type"})  # type = 5
      {
        # first 2 bits is lcid, 6 lsb bits is bsr according to 3gpp 36.321, table 6.1.3.1-1
        if($settings{numerical})
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'bsr'} = getBsrBufferSizesInBytes($value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList.truncatedBSR.bufferSize"} & 0x3f);
        }
        else
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'bsr'} = getBsrBufferSizesInText($value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList.truncatedBSR.bufferSize"} & 0x3f);
        }
      }
      if(defined $value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList.shortBSR.type"})  # type = 6
      {
        # first 2 bits is lcid, 6 lsb bits is bsr according to 3gpp 36.321, table 6.1.3.1-1
        if($settings{numerical})
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'bsr'} = getBsrBufferSizesInBytes($value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList.shortBSR.bufferSize"} & 0x3f);
        }
        else
        {
          $saved{$cellId, $sfn, $sf, $ueRef, 'bsr'} = getBsrBufferSizesInText($value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList.shortBSR.bufferSize"} & 0x3f);
        }
      }
      if(defined $value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList.longBSR.type"})  # type = 7
      {
        # one byte per lcid 1-4. 6 lsb bits in each byte is bsr according to if model.
        my $bufferSizeNr1Nr2 = $value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList.longBSR.bufferSizeNr1Nr2"};
        my $bufferSizeNr3Nr4 = $value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList.longBSR.bufferSizeNr3Nr4"};
        my $totalBSR = getBsrBufferSizesInBytes(($bufferSizeNr1Nr2 >> 8) & 0x3f);
        $totalBSR += getBsrBufferSizesInBytes($bufferSizeNr1Nr2 & 0x3f);
        $totalBSR += getBsrBufferSizesInBytes(($bufferSizeNr3Nr4 >> 8) & 0x3f);
        $totalBSR += getBsrBufferSizesInBytes($bufferSizeNr3Nr4 & 0x3f);
        $saved{$cellId, $sfn, $sf, $ueRef, 'bsr'} = $totalBSR;
      }

      # decode's format:
      my $element = 0;
      while(defined $value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList[$element].type"})
      {
        my $type = int $value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList[$element].type"};
        if($type == 3)  # powerHeadroomReport
        {
          # first 2 bits is reserved, 6 lsb bits is phr according to 3gpp 36.133 Table 9.1.8.4-1
          $saved{$cellId, $sfn, $sf, $ueRef, 'phr'} = getPowerHeadroomInDb($value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList[$element].powerHeadroomReport.powerHeadroom"} & 0x3f);
        } 
        elsif($type == 5)  # truncatedBSR
        {
          # first 2 bits is lcid, 6 lsb bits is bsr according to 3gpp 36.321, table 6.1.3.1-1
          if($settings{numerical})
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'bsr'} = getBsrBufferSizesInBytes($value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList[$element].truncatedBSR.bufferSize"} & 0x3f);
          }
          else
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'bsr'} = getBsrBufferSizesInText($value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList[$element].truncatedBSR.bufferSize"} & 0x3f);
          }
        } 
        elsif($type == 6)  # shortBSR
        {
          # first 2 bits is lcid, 6 lsb bits is bsr according to 3gpp 36.321, table 6.1.3.1-1
          if($settings{numerical})
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'bsr'} = getBsrBufferSizesInBytes($value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList[$element].shortBSR.bufferSize"} & 0x3f);
          }
          else
          {
            $saved{$cellId, $sfn, $sf, $ueRef, 'bsr'} = getBsrBufferSizesInText($value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList[$element].shortBSR.bufferSize"} & 0x3f);
          }
        } 
        elsif($type == 7)  # longBSR
        {
          # one byte per lcid 1-4. 6 lsb bits in each byte is bsr according to if model.
          my $bufferSizeNr1Nr2 = $value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList[$element].longBSR.bufferSizeNr1Nr2"};
          my $bufferSizeNr3Nr4 = $value{"ueUlMacCtrlInfo[$ctrlInfo].macCtrlElementList[$element].longBSR.bufferSizeNr3Nr4"};
          my $totalBSR = getBsrBufferSizesInBytes(($bufferSizeNr1Nr2 >> 8) & 0x3f);
          $totalBSR += getBsrBufferSizesInBytes($bufferSizeNr1Nr2 & 0x3f);
          $totalBSR += getBsrBufferSizesInBytes(($bufferSizeNr3Nr4 >> 8) & 0x3f);
          $totalBSR += getBsrBufferSizesInBytes($bufferSizeNr3Nr4 & 0x3f);
          $saved{$cellId, $sfn, $sf, $ueRef, 'bsr'} = $totalBSR;
        } 
        $element++;
      }
    }
    
    $ctrlInfo++;
  }
}


sub UpDlRlcPeRlcStatusForDlTrafficIndS
{
  # This bundled signal includes a list of all MAC control elements and SDU informaton from all scheduled UE
  # and Msg 3 sessions belonging to this cell and for this sub-frame
  
  if(!defined $sourceVisible{dl_rlc_status}) {return;}

  readAttributeData();
  my $cellId = $value{cellId};
  
  # unknown which sfn and sf, use trace until solved
  my $sfn = $traceSfnTime;
  my $sf = $traceSfTime;
  my $ueRef = -1;

  if(flushData($cellId, $sfn, $sf, $ueRef, "dl_rlc_status"))
  {
    $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
    $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
    $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
    $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
    $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;

    $saved{$cellId, $sfn, $sf, $ueRef, 'dlRlcBuffer'} = $value{pduSizeInBytes};
  }
}


sub UpDlRlcPeRlcStatusForUlTrafficIndS
{
  # This bundled signal includes a list of all MAC control elements and SDU informaton from all scheduled UE
  # and Msg 3 sessions belonging to this cell and for this sub-frame
  
  if(!defined $sourceVisible{ul_rlc_status}) {return;}

  readAttributeData();
  my $cellId = $value{cellId};
  
  # unknown which sfn and sf, use trace until solved
  my $sfn = $traceSfnTime;
  my $sf = $traceSfTime;
  my $ueRef = -1;

  if(flushData($cellId, $sfn, $sf, $ueRef, "ul_rlc_status"))
  {
    $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
    $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
    $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
    $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
    $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;

    $saved{$cellId, $sfn, $sf, $ueRef, 'ulRlcBuffer'} = $value{pduSizeInBytes};
  }
}


sub UpUlL1PeEiAllocationIndS
{
  if(!defined $sourceVisible{ei_alloc}) {return;}

  readAttributeData();
  
  my $cellId = $value{'header.cellId'};
  my $sfn = $value{'header.sfn'};
  my $sf = $value{'header.subFrameNo'};
  
  my $i = 0;
  while(defined $value{"ulL1PuschAllocationStructList[$i].common.clientRef"})
  {
    my $ueRef = sprintf("%x", $value{"ulL1PuschAllocationStructList[$i].common.clientRef"});

    if(flushData($cellId, $sfn, $sf, $ueRef, "ei_alloc"))
    {
      $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;

      $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrb'} = $value{"ulL1PuschAllocationStructList[$i].l1.prbListEnd"} - $value{"ulL1PuschAllocationStructList[$i].l1.prbListStart"} + 1;
      $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrbStart'} = $value{"ulL1PuschAllocationStructList[$i].l1.prbListStart"};
      $saved{$cellId, $sfn, $sf, $ueRef, 'ulPrbEnd'} = $value{"ulL1PuschAllocationStructList[$i].l1.prbListEnd"};
      $saved{$cellId, $sfn, $sf, $ueRef, 'ulTbs'} = $value{"ulL1PuschAllocationStructList[$i].l1.tbs"};
      $saved{$cellId, $sfn, $sf, $ueRef, 'ulModulation'} = getUlModulationFromQm($value{"ulL1PuschAllocationStructList[$i].l1.qm"});
      if($settings{numerical})
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulNdf'} = $value{"ulL1PuschAllocationStructList[$i].l1.newDataFlag"} ? 1 : 0;
      }
      else
      {
        $saved{$cellId, $sfn, $sf, $ueRef, 'ulNdf'} = $value{"ulL1PuschAllocationStructList[$i].l1.newDataFlag"} ? "Y" : "N";
      }

      $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqProcessId'} = $value{"ulL1PuschAllocationStructList[$i].l1.dlHarqAllocInfo.dlHarqProcessId"};
      $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqTddBundling'} = $value{"ulL1PuschAllocationStructList[$i].tddDlHarqBundling.nBundled"};
    }
    
    $i++;
  }
}


sub UpUlMacPeCiDlHarqAllocIndS {
  if(!defined $sourceVisible{dl_harq_alloc}) {return;}

  readAttributeData();
  
  my $cellId = $value{'header.cellId'};
  my $sfn = $value{'header.sfn'};
  my $sf = $value{'header.subFrameNo'};
  
  my $i = 0;
  while(defined $value{"harqAllocList[$i].bbUeRef"})
  {
    my $ueRef = sprintf("%x", $value{"harqAllocList[$i].bbUeRef"});

    if(flushData($cellId, $sfn, $sf, $ueRef, "dl_harq_alloc"))
    {
      $saved{$cellId, $sfn, $sf, $ueRef, 'bfnRegister'} = $bfnRegister;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesfn'} = $traceSfnTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'tracesf'} = $traceSfTime;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasfn'} = $sfn;
      $saved{$cellId, $sfn, $sf, $ueRef, 'datasf'} = $sf;

      $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqProcessId'} = $value{"harqAllocList[$i].dlHarqProcessId"};
      $saved{$cellId, $sfn, $sf, $ueRef, 'dlHarqTddBundling'} = $value{"harqAllocList[$i].tddDlHarqBundlingInfo.nBundled"};
    }
    
    $i++;
  }
}


# ------------- Common function -----------------------------------------------------------------


sub readAttributeData
{
  %value = ();

  if($decodePrintout ne "")
  {
    if($ltng == 1)
    {
      readAttributeDataFromLtngPrintout($decodePrintout);
    }
    else
    {
      readAttributeDataFromDecodePrintout($decodePrintout);
    }
  }
  
  foreach (split(/, /, $signalData))
  {
    if($_ =~ /^(.*?): (.*)/)
    {
      $value{$1} = $2;
    }
  }
}


sub readAttributeDataFromDecodePrintout
{
  my ($allData) = @_;
  
  my $path = "";
  
  $allData =~ s/\n/, /g;
  $allData =~ s/^\s*[^\s]+? \{,?//;

  while($allData ne "")
  {
    #my $firstPart = substr $allData, 0, 50;
    #print "$firstPart\n";
    
    if($allData =~ s/^\s*([^\s\{\}]+?) \{,?//)
    {
      $path .= "$1.";
    }
    elsif($allData =~ s/^\s*[^\s\{\}]+\s([^\s\{\}]+?) \{,?//)
    {
      $path .= "$1.";
    }
    elsif($allData =~ s/^\s*\},?//)
    {
      $path =~ s/[^\.]+\.$//;
    }
    elsif($allData =~ s/^\s*([^\s\{\}]+?)\[\] = \[(.*?)\][^,\}]+,?//)
    {
      my $attributeName = $1;
      my $arrayData = $2;
      my $index = 0;
      foreach my $data (split(/, /, $arrayData))
      {
        $value{"$path$attributeName\[$index\]"} = $data;
        $index++;
      }
    }
    elsif($allData =~ s/^\s*[^\s\{\}]+\s([^\s\{\}]+?)\[\] = \[(.*?)\][^,\}\s]+,?//)
    {
      my $attributeName = $1;
      my $arrayData = $2;
      my $index = 0;
      foreach my $data (split(/, /, $arrayData))
      {
        $value{"$path$attributeName\[$index\]"} = $data;
        $index++;
      }
    }
    elsif($allData =~ s/^\s*([^\s\{\}]+?) = ([^,\}\s]+),?//)
    {
      $value{"$path$1"} = $2;
    }
    elsif($allData =~ s/^\s*[^\s\{\}]+\s([^\s]+?) = ([^,\}\s]+),?//)
    {
      $value{"$path$1"} = $2;
    }
    elsif($allData =~ s/^\s*[^,}]+,?//)
    {
    }
    else
    {
      print "Bbfilter warning: Unresolved data $allData\n";
      return;
    }
  }
  
  #foreach my $key (sort {$a cmp $b} keys %value)
  #{
  #  print "$key = $value{$key}\n";
  #}
}


sub readAttributeDataFromLtngPrintout
{
  my ($allData) = @_;
  
  $allData =~ s/\r//g;
  $allData =~ s/\s\n/\n/g;
  $allData =~ s/^\s*[^\s]+? \{\n(.*)\n\}\s?\n$/$1/s;
  readLtngLevel($allData, "", "");
  
  #foreach my $key (sort {$a cmp $b} keys %value)
  #{
  #  print "$key = $value{$key}\n";
  #}
}

sub readLtngLevel
{
  my ($data, $currentAttribute, $prefix) = @_;

#print "readLtngLevel ($currentAttribute, $prefix):\n";
  #print "$data\n";

  my $structIndex = 0;
  my $attributeIndex = 0;
  my $lastAttribute = "";
  
  $data =~ /^(\s+)/;
  my $indentation = $1;
  while($data =~ s/^$indentation(.*?),\n($indentation[^\s].*)/$2/s || $data =~ s/^$indentation(.*)//s)
  {
    my $next = $1;
#print "next: $next\n";

    if($next =~ /^\{\n(.*)\n\s+\}/s)
    {
      my $data = $1;
#print "element ($data)\n";
      readLtngLevel($data, $currentAttribute, "$prefix\[$structIndex\]");
      $structIndex++;
    }
    elsif($next =~ /^([^\s]+) \{\n(.*)\n\s+\}/s)
    {
      my($newAttribute, $data) = ($1, $2);
#print "child ($newAttribute, $data)\n";

      if($currentAttribute eq "reportList" && $newAttribute =~ /^(pucchReport|puschReport|pucchSrReport)$/)
      {
        # hard coding to handle old union reportList
        readLtngLevel($data, $newAttribute, "$prefix\[$structIndex\].$1");
	$structIndex++;
      }
      elsif($currentAttribute eq $newAttribute)
      {
        readLtngLevel($data, $newAttribute, "$prefix\[$structIndex\]");
	$structIndex++;
      }
      elsif($newAttribute =~ /$currentAttribute\.(.*)/)
      {
        readLtngLevel($data, $newAttribute, "$prefix\[$structIndex\].$1");
	$structIndex++;
      }
      else
      {
  	$structIndex = 0;
        if($prefix eq "")
        {
          readLtngLevel($data, $newAttribute, $newAttribute);
        }
        else
        {
          readLtngLevel($data, $newAttribute, "$prefix.$newAttribute");
        }
      }
    }
    elsif($next =~ /^(.*?)\s(.*)/)
    {
      my($newAttribute, $value) = ($1, $2);
#print "value ($newAttribute, $value)\n";

      $structIndex = 0;
      my $fullAttributeName = $prefix eq "" ? "$newAttribute" : "$prefix.$newAttribute";
      $fullAttributeName = $prefix =~ /\.$newAttribute$/ ? $prefix : $fullAttributeName;
      if($newAttribute eq $lastAttribute)
      {
        if($attributeIndex == 0)
	{
	  $value{"$fullAttributeName\[0\]"} = $value{$fullAttributeName};
	  $attributeIndex++;
	}
        $fullAttributeName .= "[$attributeIndex]";
	$attributeIndex++;
      }
      else
      {
        $lastAttribute = $newAttribute;
      }
      
      if($value eq "true")
      {
        $value{$fullAttributeName} = 1;
      }
      elsif($value eq "false")
      {
        $value{$fullAttributeName} = 0;
      }
      else
      {
        $value{$fullAttributeName} = $value;
      }
    }
  }
}

sub calculateSf
{
  my($sf, $sfDelta) = @_;
  
  my $newSf = $sf + $sfDelta;
  if($newSf < 0)
  {
    return ($newSf + 10);
  }
  elsif($newSf > 9)
  {
    return ($newSf - 10);
  }
  
  return $newSf;
}


sub calculateSfn
{
  my($sfn, $sf, $sfDelta) = @_;
  
  if(($sf + $sfDelta) < 0)
  {
    return ($sfn - 1);
  }
  elsif(($sf + $sfDelta) > 9)
  {
    return ($sfn + 1);
  }
  
  return $sfn;
}


sub qm6ToText
{
  my ($value, $digits) = @_;
  return sprintf("%6.${digits}f", $value / 64);
}


sub qm14ToText
{
  my ($value, $digits) = @_;
  return sprintf("%6.${digits}f", $value / 16384);
}


sub dlGinrOuterLoopAdjToText
{
  my ($dlGinrOuterLoopAdj) = @_;

  my $dlGinrOuterLoopAdjDec = hex $dlGinrOuterLoopAdj;

  my $sign = "";
  if($dlGinrOuterLoopAdjDec & 0x00800000)
  {
    $dlGinrOuterLoopAdjDec = ~$dlGinrOuterLoopAdjDec + 1;
    $sign = "-";
  }

  my $firstpart  = ($dlGinrOuterLoopAdjDec & 0x007F8000);
  $firstpart  = $firstpart >> 15;

  my $secondpart = ($dlGinrOuterLoopAdjDec & 0x00007FFF);
  $secondpart = $secondpart * 10000 / 32768;

  my $value = sprintf("$sign$firstpart.%04d", $secondpart);
  return sprintf("%6.4f", $value);
}



sub averageUlGainToText
{
  my ($averageUlGain) = @_;

  my $averageUlGainDec = hex $averageUlGain;

  my $sign = "";
  if($averageUlGainDec & 0x00800000)
  {
    $sign = "-";
  }

  my $averageUlGainDec2comp = ~$averageUlGainDec; # + 1;
  my $firstpart  = ($averageUlGainDec2comp & 0x007F8000);
  $firstpart  = $firstpart >> 15;

  my $secondpart = ($averageUlGainDec & 0x00007FFF);
  $secondpart = $secondpart * 10 / 32768;

  my $value = sprintf("$sign$firstpart.%1d", $secondpart);
  return sprintf("%6.1f", $value);
}


sub getDlModulationFromModType
{
  my ($modType) = @_;
  
  if($modType == 0)
  {
    return "QPSK";
  }
  elsif($modType == 1)
  {
    return "16QAM";
  }
  elsif($modType == 2)
  {
    return "64QAM";
  }

  return "";
}


sub getDlModulationFromMcs
{
  my ($mcs) = @_;
  
  if($settings{numerical})
  {
    if($mcs < 10)
    {
      return 0;
    }
    elsif($mcs < 17)
    {
      return 1;
    }
    elsif($mcs < 29)
    {
      return 2;
    }
  }
  else
  {
    if($mcs < 10)
    {
      return "QPSK";
    }
    elsif($mcs < 17)
    {
      return "16QAM";
    }
    elsif($mcs < 29)
    {
      return "64QAM";
    }
  }

  return "";
}


sub getUlModulationFromQm
{
  my ($qm) = @_;
  
  if($settings{numerical})
  {
    if($qm == 2)
    {
      return 0;
    }
    elsif($qm == 4)
    {
      return 1;
    }
    elsif($qm == 6)
    {
      return 2;
    }
  }
  else
  {
    return $ulModulationName{$qm};
  }
}


sub getTpcAdjustmentFromTpcCommand
{
  my ($tpcCommand) = @_;
  
  if($tpcCommand == 0)
  {
    return -1;
  }
  elsif($tpcCommand == 1)
  {
    return 0;
  }
  elsif($tpcCommand == 2)
  {
    return 1;
  }
  elsif($tpcCommand == 3)
  {
    return 3;
  }

  return "";
}


# Power Headroom (PHR)
#
# From 3gpp 36.321, Table 9.1.8.4-1:
# Reported value	Measured quantity value (dB)
# POWER_HEADROOM_0	-23 <= PH < -22
# POWER_HEADROOM_1	-22 <= PH < -21
# POWER_HEADROOM_2	-21 <= PH < -20
# POWER_HEADROOM_3	-20 <= PH < -19
# POWER_HEADROOM_4	-19 <= PH < -18
# POWER_HEADROOM_5	-18 <= PH < -17
# ...
# POWER_HEADROOM_57	34 <= PH < 35
# POWER_HEADROOM_58	35 <= PH < 36
# POWER_HEADROOM_59	36 <= PH < 37
# POWER_HEADROOM_60	37 <= PH < 38
# POWER_HEADROOM_61	38 <= PH < 39
# POWER_HEADROOM_62	39 <= PH < 40
# POWER_HEADROOM_63	PH >= 40 


sub getPowerHeadroomInDb
{
  # returns the lower bound of the power headroom

  my ($powerHeadroomIndex) = @_;
  return ($powerHeadroomIndex - 23);
}


# Buffer Status Report (BSR)
#
# From 3gpp 36.321, table 6.1.3.1-1:
# Index	Buffer Size (BS) value [bytes]
# 0	BS = 0
# 1	0 < BS <= 10
# 2	10 < BS <= 12
# 3	12 < BS <= 14
# 4	14 < BS <= 17
# 5	17 < BS <= 19
# 6	19 < BS <= 22
# 7	22 < BS <= 26
# 8	26 < BS <= 31
# 9	31 < BS <= 36
# 10	36 < BS <= 42
# 11	42 < BS <= 49
# 12	49 < BS <= 57
# 13	57 < BS <= 67
# 14	67 < BS <= 78
# 15	78 < BS <= 91
# 16	91 < BS <= 107
# 17	107 < BS <= 125
# 18	125 < BS <= 146
# 19	146 < BS <= 171
# 20	171 < BS <= 200
# 21	200 < BS <= 234
# 22	234 < BS <= 274
# 23	274 < BS <= 321
# 24	321 < BS <= 376
# 25	376 < BS <= 440
# 26	440 < BS <= 515
# 27	515 < BS <= 603
# 28	603 < BS <= 706
# 29	706 < BS <= 826
# 30	826 < BS <= 967
# 31	967 < BS <=1132
# 32	1132 < BS <= 1326
# 33	1326 < BS <= 1552
# 34	1552 < BS <= 1817
# 35	1817 < BS <= 2127
# 36	2127 < BS <= 2490
# 37	2490 < BS <= 2915
# 38	2915 < BS <= 3413
# 39	3413 < BS <= 3995
# 40	3995 < BS <= 4677
# 41	4677 < BS <= 5476
# 42	5476 < BS <= 6411
# 43	6411 < BS <= 7505
# 44	7505 < BS <= 8787
# 45	8787 < BS <= 10287
# 46	10287 < BS <= 12043
# 47	12043 < BS <= 14099
# 48	14099 < BS <= 16507
# 49	16507 < BS <= 19325
# 50	19325 < BS <= 22624
# 51	22624 < BS <= 26487
# 52	26487 < BS <= 31009
# 53	31009 < BS <= 36304
# 54	36304 < BS <= 42502
# 55	42502 < BS <= 49759
# 56	49759 < BS <= 58255
# 57	58255 < BS <= 68201
# 58	68201 < BS <= 79846
# 59	79846 < BS <= 93479
# 60	93479 < BS <= 109439
# 61	109439 < BS <= 128125
# 62	128125 < BS <= 150000
# 63	BS > 150000


sub initializeBsrBufferSizes
{
  %bsrBufferSize = (0 => "0", 1 => ">0", 2 => ">10", 3 => ">12", 4 => ">14", 5 => ">17", 6 => ">19", 7 => ">22", 8 => ">26", 9 => ">31", 10 => ">36", 11 => ">42", 12 => ">49", 13 => ">57", 14 => ">67", 15 => ">78", 16 => ">91", 17 => ">107", 18 => ">125", 19 => ">146", 20 => ">171", 21 => ">200", 22 => ">234", 23 => ">274", 24 => ">321", 25 => ">376", 26 => ">440", 27 => ">515", 28 => ">603", 29 => ">706", 30 => ">826", 31 => ">967", 32 =>">1132", 33 => ">1326", 34 => ">1552", 35 => ">1817", 36 => ">2127", 37 => ">2490", 38 => ">2915", 39 => ">3413", 40 => ">3995", 41 => ">4677", 42=> ">5476", 43 => ">6411", 44 => ">7505", 45 => ">8787", 46 => ">10287", 47 => ">12043", 48 => ">14099", 49 => ">16507", 50 => ">19325", 51 =>">22624", 52 => ">26487", 53 => ">31009", 54 => ">36304", 55 => ">42502", 56 => ">49759", 57 => ">58255", 58 => ">68201", 59 => ">78846", 60 => ">93479", 61 => ">109439", 62 => ">128125", 63 => ">150000");
}


sub getBsrBufferSizesInBytes
{
  # returns the lower bound of the buffer size in bytes, only the numerical value
  my ($bsrBufferIndex) = @_;
  
  my $bsrBufferSize = $bsrBufferSize{$bsrBufferIndex};
  if($bsrBufferSize eq ">0")
  {
    # special case, value is between 1-9, set to 1 to not confuse with 0
    $bsrBufferSize = "1";
  }
  else
  {
    $bsrBufferSize =~ s/.*?(\d+).*?/$1/;
  }
  
  return $bsrBufferSize;
}


sub getBsrBufferSizesInText
{
  # returns the lower bound of the buffer size in bytes, might have > in front of value
  my ($bsrBufferIndex) = @_;
  return $bsrBufferSize{$bsrBufferIndex};
}


sub initializeRBG
{
  my $bandwidth = $settings{bandwidth};

  # Set RBG value depending on bandwidth. Needed for PRB calculation. From 3GPP Spec 36.213, 7.1.6.1
  if($bandwidth == 1.4)  # 6 RB
  {
    $rbg = 1;
    $maxDlPrb = 6;
  }
  elsif($bandwidth == 3)  # 15 RB
  {
    $rbg = 2;
    $maxDlPrb = 15;
  }
  elsif($bandwidth == 5)  # 25 RB
  {
    $rbg = 2;
    $maxDlPrb = 25;
  }
  elsif($bandwidth == 10)  # 50 RB
  {
    $rbg = 3;
    $maxDlPrb = 50;
  }
  elsif($bandwidth == 15)  # 75 RB
  {
    $rbg = 4;
    $maxDlPrb = 75;
  }
  elsif($bandwidth == 20)  # 100 RB
  {
    $rbg = 4;
    $maxDlPrb = 100;
  }
  else
  {
    print "Unsupported bandwidth $bandwidth. Supported bandwidths are 1.4, 3, 5, 10, 15 and 20.\n";
    exit 1;
  }
}


sub dlHarqFeedback
{
  my ($ueRef, $error) = @_;

  if(!defined $savedDlHarqAckNacksInWindow{$ueRef})
  {
    $savedDlHarqAckNacksInWindow{$ueRef} = 0;
    my @list = ();
    $dlHarqFeedbackWindow{$ueRef} = \@list;
  }
  
  if($savedDlHarqAckNacksInWindow{$ueRef} < $harqWindowSize)
  {
    $savedDlHarqAckNacksInWindow{$ueRef}++;
  }
  else
  {
     my $firstFeedback = shift @{$dlHarqFeedbackWindow{$ueRef}};
    $nrOfDlHarqErrorsInWindow{$ueRef} -= $firstFeedback;
  }

  push @{$dlHarqFeedbackWindow{$ueRef}}, $error;
  $nrOfDlHarqErrorsInWindow{$ueRef} += $error;
}


sub ulHarqFeedback
{
  my ($ueRef, $error) = @_;
  
  if(!defined $savedUlHarqAckNacksInWindow{$ueRef})
  {
    $savedUlHarqAckNacksInWindow{$ueRef} = 0;
    my @list = ();
    $ulHarqFeedbackWindow{$ueRef} = \@list;
  }

  if($savedUlHarqAckNacksInWindow{$ueRef} < $harqWindowSize)
  {
    $savedUlHarqAckNacksInWindow{$ueRef}++;
  }
  else
  {
    my $firstFeedback = shift @{$ulHarqFeedbackWindow{$ueRef}};
    $nrOfUlHarqErrorsInWindow{$ueRef} -= $firstFeedback;
  }

  push @{$ulHarqFeedbackWindow{$ueRef}}, $error;
  $nrOfUlHarqErrorsInWindow{$ueRef} += $error;
}


sub getTypeOfDlData
{
  my ($seWeight) = @_;
  
  my $weightResolution = 65534;
  my $minPriority = 256;
  
  my $usedPriority = sprintf("%.2f", $seWeight / $weightResolution);
  my $usedPriorityInt = int($seWeight / $weightResolution);
  my $diffFromWeighterPriority = ($usedPriority - $usedPriorityInt) - $usedPriorityInt % 2;
  my $weighterPriority = $usedPriority - $diffFromWeighterPriority;
  
  my $priority = int($minPriority - $weighterPriority);
  my $type = $typeOfDataForPriority{$priority};

  if(defined $type)
  {
    if($diffFromWeighterPriority >= 0.25) {$type .= "(re)";}
    return $type;
  }
  
  return "$priority ($diffFromWeighterPriority)";
}


# ------------- Print output -----------------------------------------------------------------


sub initializePrintFields
{
  my $numericalAndCsv = $settings{numerical} && $settings{csv};

  $fieldHeader{traceTime} = " trace timestamp ";
  $fieldFormat{traceTime} = " %-15s ";
  $fieldShortDescription{traceTime} = "Trace timestamp ";
  $fieldLongDescription{traceTime} = "";
  $fieldSource{traceTime} = "many";
  push @allFields, "traceTime";

  $fieldHeader{bfnRegister} = "  bfn reg   ";
  $fieldFormat{bfnRegister} = " %10s ";
  $fieldShortDescription{bfnRegister} = "Baseband timestamp from the trace";
  $fieldLongDescription{bfnRegister} = "Can be used to easily find corresponding trace in the trace file";
  $fieldSource{bfnRegister} = "many";
  push @allFields, "bfnRegister";

  $fieldHeader{cellId} = "cell";
  $fieldFormat{cellId} = "%3s ";
  $fieldShortDescription{cellId} = "Cell Id";
  $fieldLongDescription{cellId} = "";
  $fieldSource{cellId} = "many";
  push @allFields, "cellId";

  # $fieldHeader{tracesfn} = "sfnTr";
  # $fieldFormat{tracesfn} = "%4s ";
  # $fieldShortDescription{tracesfn} = "System Frame Number in trace";
  # $fieldLongDescription{tracesfn} = "This is the SFN value in the node from when the trace was made. It might not\n".
  #                              "corresponds exactly o the System Frame Number the data belongs to. Unit 10 ms";
  # $fieldSource{tracesfn} = "many";
  # push @allFields, "tracesfn";
  # 
  # $fieldHeader{tracesf} = "sfTr";
  # $fieldFormat{tracesf} = " %2s ";
  # $fieldShortDescription{tracesf} = "Sub Frame in trace";
  # $fieldLongDescription{tracesf} = "This is the SF value in the node from when the trace was made. It might not\n".
  #                             "corresponds exactly o the System Frame Number the data belongs to.Unit 1 ms";
  # $fieldSource{tracesf} = "many";
  # push @allFields, "tracesf";

  $fieldHeader{datasfn} = " sfn ";
  $fieldFormat{datasfn} = "%4s ";
  $fieldShortDescription{datasfn} = "System Frame Number";
  $fieldLongDescription{datasfn} = "This is the SFN value the data belongs to (normally not the same as when the trace\n".
                                   "was done). Unit 10 ms";
  $fieldSource{datasfn} = "many";
  push @allFields, "datasfn";

  $fieldHeader{datasf} = "sf ";
  $fieldFormat{datasf} = "%2s ";
  $fieldShortDescription{datasf} = "Sub Frame";
  $fieldLongDescription{datasf} = "This is the SF value the data belongs to (normally not the same as when the trace\n".
                                   "was done). Unit 1 ms";
  $fieldSource{datasf} = "many";
  push @allFields, "datasf";

  $fieldHeader{nrOfUe} = " #ue ";
  $fieldFormat{nrOfUe} = " %3s ";
  $fieldShortDescription{nrOfUe} = "Number of scheduled UEs in DL for this TTI";
  $fieldLongDescription{nrOfUe} = "";
  $fieldSource{nrOfUe} = "dl_alloc";
  push @allFields, "nrOfUe";

  $fieldHeader{rnti} = "   rnti   ";
  $fieldFormat{rnti} = " %-8s ";
  $fieldShortDescription{rnti} = "Radio-Network Temporary Identifier";
  $fieldLongDescription{rnti} = "UE Id";
  $fieldSource{rnti} = "many";
  push @allFields, "rnti";

  $fieldHeader{bbUeRef} = "  bbUeRef   ";
  $fieldFormat{bbUeRef} = " %-11s";
  $fieldShortDescription{bbUeRef} = "Baseband UE reference";
  $fieldLongDescription{bbUeRef} = "Displayed in hex format.";
  $fieldSource{bbUeRef} = "many";
  push @allFields, "bbUeRef";

  $fieldHeader{dlMode} = $numericalAndCsv ? "mode\%{0=SIMO,1=TxDiv,2=MIMO}" : " mode ";
  $fieldFormat{dlMode} = " %-4s ";
  $fieldShortDescription{dlMode} = "DL Transmission Mode";
  $fieldLongDescription{dlMode} = "- SIMO (Single Input Multiple Output). eNodeB transmits one data stream using one antenna.\n".
                                  "- TX Diversity. eNodeB transmits the same signal on two antennas. This provides better\n".
                                  "  better performance on fading channels.\n".    
                                  "- MIMO (Multiple Input Multiple Output). eNodeB transmits two data streams simultaneously\n".
                                  "  on separate antenna branches. This will improve user data rates depending on their\n".
                                  "  multi-path environment.\n".
                                  "In numerical mode: 0=SIMO, 1=TxDiv, 2=MIMO";
  $fieldSource{dlMode} = "dl_alloc";
  push @allFields, "dlMode";

  $fieldHeader{dlModulation} = $numericalAndCsv ? "dlModul\%{0=QPSK,1=16QAM,2=64QAM}" : "dlModul";
  $fieldFormat{dlModulation} = " %-5s ";
  $fieldShortDescription{dlModulation} = "DL Modulation";
  $fieldLongDescription{dlModulation} = "Number of bits per symbol. QPSK (2 bits), 16QAM (4 bits) and 64QAM (6 bits).\n".
                                        "In numerical mode: 0=QPSK, 1=16QAM, 2=64QAM.";
  $fieldSource{dlModulation} = "dl_sched_mcs,dl_alloc";
  push @allFields, "dlModulation";

  $fieldHeader{dlMcs1} = "mcs1";
  $fieldFormat{dlMcs1} = " %2s ";
  $fieldShortDescription{dlMcs1} = "DL Modulation and Coding Scheme for codeword 1";
  $fieldLongDescription{dlMcs1} = "Coding rate (ratio of information and coded bits). Mcs 29 is used for retransmission QPSK and\n".
                                  "for CQI reports, 30 for retransmission 16QAM, 31 for retransmission 64QAM.";
  push @allFields, "dlMcs1";

  $fieldHeader{dlMcs2} = "mcs2";
  $fieldFormat{dlMcs2} = " %2s ";
  $fieldShortDescription{dlMcs2} = "DL Modulation and Coding Scheme for codeword 2";
  $fieldLongDescription{dlMcs2} = "Coding rate (ratio of information and coded bits)";
  $fieldSource{dlMcs2} = "dl_sched_mcs";
  push @allFields, "dlMcs2";

  $fieldHeader{dlPrb} = " prb";
  $fieldFormat{dlPrb} = " %2s ";
  $fieldShortDescription{dlPrb} = "Number of DL Physical Radio Bearers";
  $fieldLongDescription{dlPrb} = "";
  $fieldSource{dlPrb} = "dl_alloc";
  push @allFields, "dlPrb";

  $fieldHeader{dai} = "tddDai";
  $fieldFormat{dai} = "   %2s ";
  $fieldShortDescription{dai} = "DL TDD Downlink Assigment Index";
  $fieldLongDescription{dai} = "Only applicable for TDD.";
  $fieldSource{dai} = "ul_sched";
  push @allFields, "dai";
  # For dciMsg bits, see /vobs/erbs/upc/ulMacCeBl/puschIfU/inc/ulmacce_schedmsgbuilder.h

  $fieldHeader{dlTb1} = " dlTbs1 ";
  $fieldFormat{dlTb1} = " %6s ";
  $fieldShortDescription{dlTb1} = "DL Transport Block Size in bits for codeword 1";
  $fieldLongDescription{dlTb1} = "Size on MAC layer.";
  $fieldSource{dlTb1} = "dl_sched_mcs,dl_alloc";
  push @allFields, "dlTb1";

  $fieldHeader{dlTb2} = " dlTbs2 ";
  $fieldFormat{dlTb2} = " %6s ";
  $fieldShortDescription{dlTb2} = "DL Transport Block Size in bits for codeword 2";
  $fieldLongDescription{dlTb2} = "Size on MAC layer.";
  $fieldSource{dlTb2} = "dl_sched_mcs,dl_alloc";
  push @allFields, "dlTb2";

  $fieldHeader{dlRvIndex} = "rvInd";
  $fieldFormat{dlRvIndex} = "   %1s ";
  $fieldShortDescription{dlRvIndex} = "DL Redundancy version index";
  $fieldLongDescription{dlRvIndex} = "";
  $fieldSource{dlRvIndex} = "dl_alloc";
  push @allFields, "dlRvIndex";

  $fieldHeader{dlRateMatchedBits1} = "rateBit1";
  $fieldFormat{dlRateMatchedBits1} = " %6s ";
  $fieldShortDescription{dlRateMatchedBits1} = "DL Nr of Rate Matched Bits for codeword 1";
  $fieldLongDescription{dlRateMatchedBits1} = "Size on L1 layer.";
  $fieldSource{dlRateMatchedBits1} = "dl_alloc";
  push @allFields, "dlRateMatchedBits1";

  $fieldHeader{dlRateMatchedBits2} = "rateBit2";
  $fieldFormat{dlRateMatchedBits2} = " %6s ";
  $fieldShortDescription{dlRateMatchedBits2} = "DL Nr of Rate Matched Bits for codeword 2";
  $fieldLongDescription{dlRateMatchedBits2} = "Size on L1 layer.";
  $fieldSource{dlRateMatchedBits2} = "dl_alloc";
  push @allFields, "dlRateMatchedBits2";

  $fieldHeader{dlNdf} = "dlNdf";
  $fieldFormat{dlNdf} = " %3s ";
  $fieldShortDescription{dlNdf} = "DL New Data Flag";
  $fieldLongDescription{dlNdf} = "Shows whether new data is scheduled or if this is a retransmission. Value per transport block.";
  $fieldSource{dlNdf} = "dl_alloc";
  push @allFields, "dlNdf";

  $fieldHeader{dlNdi} = "dlNdi";
  $fieldFormat{dlNdi} = " %3s ";
  $fieldShortDescription{dlNdi} = "DL New Data Indication";
  $fieldLongDescription{dlNdi} = "This is the NDI flag that is sent to the UE. Please note that this is not the same as New Data\n".
                                 "Flag. Value per transport block. Since this is normally of no general interest, to see use the\n".
                                 "-all flag or specify to set it with the -columns flag.";
  $fieldSource{dlNdi} = "dl_sched_mcs";
  push @allFields, "dlNdi";

  $fieldHeader{dlCandidatesBits} = "dlCanBits";
  $fieldFormat{dlCandidatesBits} = " %7s ";
  $fieldShortDescription{dlCandidatesBits} = "DL Candidates Bits";
  $fieldLongDescription{dlCandidatesBits} = "The number of data bits that are ready to be scheduled as reported from RLC layer to\n".
                                            "scheduler when the size of the data ready to be scheduled has changed.";
  $fieldSource{dlCandidatesBits} = "dl_cand";
  push @allFields, "dlCandidatesBits";

  $fieldHeader{dlAssignableBits} = "dlAssBits";
  $fieldFormat{dlAssignableBits} = " %7s ";
  $fieldShortDescription{dlAssignableBits} = "DL Assignable Bits";
  $fieldLongDescription{dlAssignableBits} = "The number of data bits that ares ready to be scheduled according to the scheduler. This\n".
                                            "is the same as candidates bits but little behind in time. If the assignable bits are to low\n".
                                            "the throughput will go down (look for problems on the core side or in the application layer).";
  $fieldSource{dlAssignableBits} = "dl_bits_lcid0,dl_bits_lcid1,dl_bits_lcid2,dl_bits_lcid3,dl_bits_lcid4,dl_bits_lcid5,dl_bits_lcid6,dl_bits_lcid7";
  push @allFields, "dlAssignableBits";

  $fieldHeader{dlGinrOuterLoopAdj} = " dlOutAdj ";
  $fieldFormat{dlGinrOuterLoopAdj} = " %8s ";
  $fieldShortDescription{dlGinrOuterLoopAdj} = "DL GINR Outer Loop Adjustment";
  $fieldLongDescription{dlGinrOuterLoopAdj} = "The eNodeB adjusts for the limitations of the UEs CQI reporting. When ACK is received as\n".
                                              "HARQ feedback the DL Outer Loop Adjustment value will increase and higher MCS values are\n".
                                              "selected even do the reported CQI is low. HARQ NACKs will do the opposite but faster.";
  $fieldSource{dlGinrOuterLoopAdj} = "dl_outloop";
  push @allFields, "dlGinrOuterLoopAdj";

  $fieldHeader{dlSeWeight} = "dlSeWeight";
  $fieldFormat{dlSeWeight} = " %8s ";
  $fieldShortDescription{dlSeWeight} = "DL SE Weight";
  $fieldLongDescription{dlSeWeight} = "The weight that has been assigned for this scheduling entity by the scheduler. Since this is normally\n".
                                    "of no general interest, to see use the -all flag or specify to set it with the -columns flag.";
  $fieldSource{dlSeWeight} = "dl_valid";
  push @allFields, "dlSeWeight";

  $fieldHeader{dlType} = "  dlType  ";
  $fieldFormat{dlType} = " %-9s";
  $fieldShortDescription{dlType} = "DL Type of data";
  $fieldLongDescription{dlType} = "The DL SE Weight is used to calculate the priority and map this to what kind of data that has\n".
                                      "been scheduled. If a number is shown instead of text it means that the script cannot map a type\n".
                                      "to this priority.";
  $fieldSource{dlType} = "dl_valid";
  push @allFields, "dlType";

  $fieldHeader{cqi} = "cqi ";
  $fieldFormat{cqi} = " %2s ";
  $fieldShortDescription{cqi} = "Channel Quality Information";
  $fieldLongDescription{cqi} = "Reported from UE to eNodeB as feedback on the DL signal.";
  $fieldSource{cqi} = "report_dl,report_dl2";
  push @allFields, "cqi";

  $fieldHeader{ri} = "ri ";
  $fieldFormat{ri} = " %1s ";
  $fieldShortDescription{ri} = "Rank Indicator";
  $fieldLongDescription{ri} = "Number of antennas the UE can see.";
  $fieldSource{ri} = "report_dl,report_dl2";
  push @allFields, "ri";

  $fieldHeader{dlHarqIndication} = $numericalAndCsv ? "dlHarq\%{0=NN,1=N/NA,2=AN,3=A/AA,4=DTX}" : " dlHarq";
  $fieldFormat{dlHarqIndication} = " %-6s";
  $fieldShortDescription{dlHarqIndication} = "DL HARQ Feedback";
  $fieldLongDescription{dlHarqIndication} = "Feedback for one or two antennas depending of SIMO or MIMO transmission. A = ACK,\n".
                                            "N = NACK. If the value is marked with (s) the report is from a PUSCH report.\n".
                                            "In numerical mode SIMO: 1=N, 3=A, 4=DTX and MIMO: 0=NN, 1=NA, 2=AN, 3=AA, 4=DTX.";
  $fieldSource{dlHarqIndication} = "report_dl,harq_dl";
  push @allFields, "dlHarqIndication";

  $fieldHeader{dlHarqBler} = "dlBler";
  $fieldFormat{dlHarqBler} = " %4s ";
  $fieldShortDescription{dlHarqBler} = "Calculated DL HARQ BLER";
  $fieldLongDescription{dlHarqBler} = "Harq error rate is calculated by the script by comparing ACKs and NACKs on a sliding window\n".
                                      "with $harqWindowSize positions to give some kind of indication of the error rate.\n".
  $fieldSource{dlHarqBler} = "report_dl,harq_dl";
  push @allFields, "dlHarqBler";

  $fieldHeader{dlHarqProcessId} = "id   ";
  $fieldFormat{dlHarqProcessId} = "%4s ";
  $fieldShortDescription{dlHarqProcessId} = "DL HARQ Process Id";
  $fieldLongDescription{dlHarqProcessId} = "";
  $fieldSource{dlHarqProcessId} = "report_dl,ei_alloc,dl_harq_alloc,harq_dl";
  push @allFields, "dlHarqProcessId";

  $fieldHeader{dlHarqTddBundling} = "bundl";
  $fieldFormat{dlHarqTddBundling} = "  %2s ";
  $fieldShortDescription{dlHarqTddBundling} = "DL HARQ TDD Bundling";
  $fieldLongDescription{dlHarqTddBundling} = "Number of DL transmissions that a UE is expected to have received during a single ACK/NACK bundling window. Only relevant to TDD.";
  $fieldSource{dlHarqTddBundling} = "ei_alloc,dl_harq_alloc";
  push @allFields, "dlHarqTddBundling";

  $fieldHeader{dlRlcBuffer} = "rlc Buf ";
  $fieldFormat{dlRlcBuffer} = " %6s ";
  $fieldShortDescription{dlRlcBuffer} = "DL RLC PDU Size in bytes";
  $fieldLongDescription{dlRlcBuffer} = "Calculated for all MAC control elements and SDU informaton from all scheduled UE\n".
                                       "and Msg 3 sessions belonging to this cell and for this sub frame.";
  $fieldSource{dlRlcBuffer} = "dl_rlc_status";
  push @allFields, "dlRlcBuffer";

  $fieldHeader{dlRlcError} = "rlcErr";
  $fieldFormat{dlRlcError} = " %4s ";
  $fieldShortDescription{dlRlcError} = "Approximate RLC error rate";
  $fieldLongDescription{dlRlcError} = "The error rate is very simple implemented in the script and compares number\n".
                                      "of NACKs vs ACKs on a sliding window with $rlcWindowSize positions to give some\n".
                                      "kind of indication of the error rate. Note! This field can not separate data\n".
                                      "from different cells from each other.";
  $fieldSource{dlRlcError} = "dl_rlc_pdu";
  push @allFields, "dlRlcError";

  $fieldHeader{rxPwrPucch} = "rxPwrPuc";
  $fieldFormat{rxPwrPucch} = " %6s ";
  $fieldShortDescription{rxPwrPucch} = "Measured RX power for PUCCH signal in dBm";
  $fieldLongDescription{rxPwrPucch} = "Measured RX power of a PUCCH report recieved from UE as reported from L1 to the\n".
                                   "scheduler.";
  $fieldSource{rxPwrPucch} = "report_dl,report_dl2,report_ul";
  push @allFields, "rxPwrPucch";

  $fieldHeader{rxPwrPusch} = "rxPwrPus";
  $fieldFormat{rxPwrPusch} = " %6s ";
  $fieldShortDescription{rxPwrPusch} = "Measured RX power for PUSCH signal in dBm";
  $fieldLongDescription{rxPwrPusch} = "Measured RX power of a PUSCH report recieved from UE as reported from L1 to the\n".
                                   "scheduler.";
  $fieldSource{rxPwrPusch} = "report_dl,report_dl2,report_ul";
  push @allFields, "rxPwrPusch";

  $fieldHeader{ulPrb} = "prb ";
  $fieldFormat{ulPrb} = " %2s ";
  $fieldShortDescription{ulPrb} = "Number of UL Physical Radio Bearers";
  $fieldLongDescription{ulPrb} = "";
  $fieldSource{ulPrb} = "report_dl,report_dl2,report_ul,ul_alloc,ei_alloc";
  push @allFields, "ulPrb";

  $fieldHeader{ulPrbStart} = "prbSta";
  $fieldFormat{ulPrbStart} = "%5s ";
  $fieldShortDescription{ulPrbStart} = "Start Position of UL Physical Radio Bearers";
  $fieldLongDescription{ulPrbStart} = "";
  $fieldSource{ulPrbStart} = "report_dl,report_dl2,report_ul,ul_alloc,ei_alloc";
  push @allFields, "ulPrbStart";

  $fieldHeader{ulPrbEnd} = "prbEnd";
  $fieldFormat{ulPrbEnd} = "%5s ";
  $fieldShortDescription{ulPrbEnd} = "End Position of UL Physical Radio Bearers";
  $fieldLongDescription{ulPrbEnd} = "";
  $fieldSource{ulPrbEnd} = "report_dl,report_dl2,report_ul,ul_alloc,ei_alloc";
  push @allFields, "ulPrbEnd";

  $fieldHeader{averageUlGain} = " ulGain ";
  $fieldFormat{averageUlGain} = " %6s ";
  $fieldShortDescription{averageUlGain} = "Average UL gain";
  $fieldLongDescription{averageUlGain} = "UL gain is basically the same thing as pathloss, and that is measured in the\n".
                                         "eNodeB and used by the link adaption.";
  $fieldSource{averageUlGain} = "ul_linkadapt";
  push @allFields, "averageUlGain";

  $fieldHeader{ulGainOuterLoopAdj} = " ulOutAdj ";
  $fieldFormat{ulGainOuterLoopAdj} = " %8s ";
  $fieldShortDescription{ulGainOuterLoopAdj} = "UL Gain Outer Loop Adjustment";
  $fieldLongDescription{ulGainOuterLoopAdj} = "";
  $fieldSource{ulGainOuterLoopAdj} = "ul_linkadapt";
  push @allFields, "ulGainOuterLoopAdj";

  $fieldHeader{ulSeWeight} = "ulSeWeight";
  $fieldFormat{ulSeWeight} = " %8s ";
  $fieldShortDescription{ulSeWeight} = "UL SE Weight";
  $fieldLongDescription{ulSeWeight} = "The weight that has been assigned for this scheduling entity by the scheduler. Since this is normally\n".
                                    "of no general interest, to see use the -all flag or specify to set it with the -columns flag.";
  $fieldSource{ulSeWeight} = "ul_valid";
  push @allFields, "ulSeWeight";

  $fieldHeader{tpcPucch} = "tpcPuc";
  $fieldFormat{tpcPucch} = " %4s ";
  $fieldShortDescription{tpcPucch} = "TPC Command Adjustment for Closed Loop Power Control (PUCCH)";
  $fieldLongDescription{tpcPucch} = "The TPC Command informs the UE how to adjust its transmitting power.\n".
                                      "Note! This columns now shows the adjustment instead of the command itself\n".
                                      "Unit 1 dB. Possible values are -1dB (TPC command 0), 0dB  (TPC command 1),\n".
				      "+1dB (TPC command 2), +3dB (TPC command 3).";
  $fieldSource{tpcPucch} = "ul_sched,dl_sched_mcs";
  push @allFields, "tpcPucch";


  $fieldHeader{tpcPusch} = "tpcPus";
  $fieldFormat{tpcPusch} = " %4s ";
  $fieldShortDescription{tpcPusch} = "TPC Command Adjustment for Closed Loop Power Control (PUSCH)";
  $fieldLongDescription{tpcPusch} = "The TPC Command informs the UE how to adjust its transmitting power.\n".
                                      "Note! This columns now shows the adjustment instead of the command itself\n".
                                      "Unit 1 dB. Possible values are -1dB (TPC command 0), 0dB  (TPC command 1),\n".
				      "+1dB (TPC command 2), +3dB (TPC command 3).";
  $fieldSource{tpcPusch} = "ul_sched,dl_sched_mcs";
  push @allFields, "tpcPusch";

  $fieldHeader{tae} = "taErr";
  $fieldFormat{tae} = "%4s ";
  $fieldShortDescription{tae} = "Timing Advance Error";
  $fieldLongDescription{tae} = "Shows Timing Advance Error (TAE) measured by the eNodeB. Timing Alignment is used to keep\n".
                               "uplink L1 timing in sync and to keep the timing offset within the targeted range. If sync\n".
                               "is lost, this causes UE connection to be lost and UE is forces to re-sync using random access.\n".
                               "1 TAE = 0.52 us = 16 Ts";
  $fieldSource{tae} = "report_dl,report_dl2";
  push @allFields, "tae";

  $fieldHeader{sinr} = "sinr";
  $fieldFormat{sinr} = "%3s ";
  $fieldShortDescription{sinr} = "Signal to Interferance and noise ratio";
  $fieldLongDescription{sinr} = "A general measure of the signal quality provided all measurements are made within\n".
                                "the same bandwidth. If the value is marked with (s) the report is from a PUSCH report.";
  $fieldSource{sinr} = "report_ul";
  push @allFields, "sinr";

  $fieldHeader{ulModulation} = $numericalAndCsv ? "ulModul\%{0=QPSK,1=16QAM,2=64QAM}" : "ulModul";
  $fieldFormat{ulModulation} = " %-5s ";
  $fieldShortDescription{ulModulation} = "UL Modulation";
  $fieldLongDescription{ulModulation} = "Number of bits per symbol. QPSK (2 bits), 16QAM (4 bits) and 64QAM (6 bits).\n".
                                        "In numerical mode: 0=QPSK, 1=16QAM, 2=64QAM.";
  $fieldSource{ulModulation} = "ul_alloc,ei_alloc";
  push @allFields, "ulModulation";

  $fieldHeader{ulMcs} = "mcs ";
  $fieldFormat{ulMcs} = " %2s ";
  $fieldShortDescription{ulMcs} = "UL Modulation and Coding Scheme";
  $fieldLongDescription{ulMcs} = "Coding rate (ratio of information and coded bits)";
  $fieldSource{ulMcs} = "ul_sched";
  push @allFields, "ulMcs";

  $fieldHeader{ulHarqInfo} = "har ";
  $fieldFormat{ulHarqInfo} = " %3s";
  $fieldShortDescription{ulHarqInfo} = "UL HARQ";
  $fieldLongDescription{ulHarqInfo} = "Harq feedback for the uplink. A = ACK, N = NACK. In numerical mode: 1=A, 0=N.";
  $fieldSource{ulHarqInfo} = "mac_ctrl";
  push @allFields, "ulHarqInfo";

  $fieldHeader{ulHarqBler} = "ulBler";
  $fieldFormat{ulHarqBler} = " %4s ";
  $fieldShortDescription{ulHarqBler} = "Calculated UL HARQ BLER";
  $fieldLongDescription{ulHarqBler} = "Harq error rate is calculated by the script by comparing ACKs and NACKs on a sliding window\n".
                                      "with $harqWindowSize positions to give some kind of indication of the error rate.\n";
  $fieldSource{ulHarqBler} = "mac_ctrl";
  push @allFields, "ulHarqBler";

  $fieldHeader{ulNdf} = "ndf";
  $fieldFormat{ulNdf} = " %1s ";
  $fieldShortDescription{ulNdf} = "UL New Data Flag";
  $fieldLongDescription{ulNdf} = "Shows whether new data is scheduled or if this is a retransmission. Value per transport block.";
  $fieldSource{ulNdf} = "ul_alloc,ei_alloc";
  push @allFields, "ulNdf";

  $fieldHeader{ulNdi} = "ndi";
  $fieldFormat{ulNdi} = " %1s ";
  $fieldShortDescription{ulNdi} = "UL New Data Indicator";
  $fieldLongDescription{ulNdi} = "This is the NDI flag that is sent to the UE. Please note that this is not the same as New Data\n".
                                 "Flag. Value per transport block. Since this is normally of no general interest, to see use the\n".
                                 "-all flag or specify to set it with the -columns flag.";
  $fieldSource{ulNdi} = "ul_sched";
  push @allFields, "ulNdi";

  $fieldHeader{ulTbs} =  "ul tbs ";
  $fieldFormat{ulTbs} = "%6s ";
  $fieldShortDescription{ulTbs} = "UL Transport Block Size in bits";
  $fieldLongDescription{ulTbs} = "";
  $fieldSource{ulTbs} = "ul_alloc,ei_alloc";
  push @allFields, "ulTbs";

  $fieldHeader{sr} = "sr ";
  $fieldFormat{sr} = " %1s ";
  $fieldShortDescription{sr} = "Scheduling Request";
  $fieldLongDescription{sr} = "Sent by UE if it has something to send and haven't been scheduled for a period.";
  $fieldSource{sr} = "report_ul";
  push @allFields, "sr";

  $fieldHeader{bsr} =  "ul bsr  ";
  $fieldFormat{bsr} = "%7s ";
  $fieldShortDescription{bsr} = "UL Buffer Status Report";
  $fieldLongDescription{bsr} = "The minimum number of data bytes in the UE that are ready to be scheduled. The value\n".
                               "shows the lower value of the range according to 3gpp 36.321, table 6.1.3.1-1.";
  $fieldSource{bsr} = "mac_ctrl";
  push @allFields, "bsr";

  $fieldHeader{phr} =  "phr ";
  $fieldFormat{phr} = "%3s ";
  $fieldShortDescription{phr} = "Power Headroom Report";
  $fieldLongDescription{phr} = "The additional return power available at the UE. Unit dB. The value shows the lower\n".
                               "value of the range according to 3gpp 36.133, Table 9.1.8.4-1.";
  $fieldSource{phr} = "mac_ctrl";
  push @allFields, "phr";

  $fieldHeader{ulCrc} = " ul crc    ";
  $fieldFormat{ulCrc} = " %-9s ";
  $fieldShortDescription{ulCrc} = "UL CRC Error";
  $fieldLongDescription{ulCrc} = "If CRC Error trace is seen, this field shows ERR and the PDU length in bytes for that\n".
                                 "transport block.";
  $fieldSource{ulCrc} = "ul_crc";
  push @allFields, "ulCrc";

  $fieldHeader{ulRlcBuffer} = "rlc buf ";
  $fieldFormat{ulRlcBuffer} = " %6s ";
  $fieldShortDescription{ulRlcBuffer} = "UL RLC PDU Size in bytes";
  $fieldLongDescription{ulRlcBuffer} = "Calculated for all MAC control elements and SDU informaton from all scheduled UE\n".
                                       "and Msg 3 sessions belonging to this cell and for this sub frame.";
  $fieldSource{ulRlcBuffer} = "ul_rlc_pdu";
  push @allFields, "ulRlcBuffer";

  $fieldHeader{ulRlcError} = "rlcErr";
  $fieldFormat{ulRlcError} = " %4s ";
  $fieldShortDescription{ulRlcError} = "Approximate RLC error rate";
  $fieldLongDescription{ulRlcError} = "The error rate is very simple implemented in the script and compares number\n".
                                      "of NACKs vs ACKs on a sliding window with $rlcWindowSize positions to give some\n".
                                      "kind of indication of the error rate. Note! This field can not separate data\n".
                                      "from different cells from each other.";
  $fieldSource{ulRlcError} = "ul_rlc_pdu";
  push @allFields, "ulRlcError";

  $fieldHeader{source} = " source        ";
  $fieldFormat{source} = " %-14s";
  $fieldShortDescription{source} = "Source of the data";
  $fieldLongDescription{source} = "Shows which signal(s) or trace(s) the data on that row is coming from. To see\n".
                                  "exactly which source it is, use the -one option.";
  $fieldSource{source} = "many";
  push @allFields, "source";

  $fieldHeader{interferancePwrPucch} = " intPwrPuc ";
  $fieldFormat{interferancePwrPucch} = " %9s ";
  $fieldShortDescription{interferancePwrPucch} = "Cell Interferance Power (PUCCH)";
  $fieldLongDescription{interferancePwrPucch} = "";
  $fieldSource{interferancePwrPucch} = "cell_report";
  push @allFields, "interferancePwrPucch";

  $fieldHeader{interferancePwrPusch} = " intPwrPus ";
  $fieldFormat{interferancePwrPusch} = " %9s ";
  $fieldShortDescription{interferancePwrPusch} = "Cell Interferance Power (PUSCH)";
  $fieldLongDescription{interferancePwrPusch} = "";
  $fieldSource{interferancePwrPusch} = "cell_report";
  push @allFields, "interferancePwrPusch";
}


sub printColumns
{
  my $bold = "\e[1m";
  my $underlined = "\e[4m";
  my $reset = "\e[0;0m";

  print "Description of the columns:\n\n";

  foreach my $fieldName (@allFields)
  {
    my $fieldHeader = $fieldHeader{$fieldName};
    $fieldHeader =~ s/^\s*(.*?)\s*$/$1/;
    printf("%-12s $underlined$bold%s$reset\n", $fieldHeader, $fieldShortDescription{$fieldName});
    foreach my $line (split(/\n/, $fieldLongDescription{$fieldName}))
    {
      printf("%-12s %-65s\n", "", $line);
    }
    print "\n";
  }

  print "Example how to specify exactly which columns should be seen (this example includes all available columns):\n";
  print "bbfilter -show \"".join(",", @allFields)."\"\n\n";

  print "Example with the columns that are currently shown:\n";
  print "bbfilter -show \"".join(",", @printFields)."\"\n\n";
}


sub setPrintFields
{
  if($settings{userspecifiedfields} ne "")
  {
    # the user has specified exactly which fields that should be shown
    foreach my $fieldName (split(/,/, $settings{userspecifiedfields}))
    {
      push @printFields, $fieldName;
    }
  }
  elsif($settings{all})
  {
    # show all possible columns
    push @printFields, @allFields;
  }
  else
  {
    if($settings{traceTime})
    {
      push @printFields, "traceTime";
    }

    # Time and UE info
    if($settings{bfnRegister})
    {
      push @printFields, "bfnRegister";
    }
    push @printFields, ("cellId", "datasfn", "datasf", "rnti", "bbUeRef");

    # DL fields
    if($settings{dl})
    {
      push @printFields, ("dlMode", "dlModulation", "dlMcs1", "dlMcs2", "dlPrb", "dai", "dlNdf", "dlTb1", "dlTb2", "dlRvIndex", "dlRateMatchedBits1", "dlRateMatchedBits2", "dlCandidatesBits", "dlAssignableBits", "dlGinrOuterLoopAdj", "dlHarqIndication", "dlHarqProcessId", "dlHarqTddBundling", "dlHarqBler", "cqi", "ri");
      if($settings{rlc})
      {
        push @printFields, "dlRlcBuffer";
        push @printFields, "dlRlcError";
      }
    }

    # UL fields
    if($settings{ul})
    {
      push @printFields, ("rxPwrPucch", "rxPwrPusch", "ulPrb", "ulPrbStart", "ulPrbEnd", "averageUlGain", "tpcPucch", "tpcPusch", "sinr", "ulModulation", "ulMcs", "ulNdf", "sr", "bsr", "phr", "ulTbs", "interferancePwrPucch", "interferancePwrPusch", "ulGainOuterLoopAdj", "ulHarqInfo", "ulHarqBler");
      if($settings{rlc})
      {
        push @printFields, "ulRlcBuffer";
        push @printFields, "ulRlcError";
      }
    }

    # Default fields
    if(!$settings{dl} && !$settings{ul})
    {
      push @printFields, ("dlMode", "dlModulation", "dlMcs1", "dlMcs2", "dlPrb", "dlNdf", "dlTb1", "dlTb2", "dlAssignableBits", "dlHarqIndication", "cqi", "ri");
      if($settings{rlc})
      {
        push @printFields, "dlRlcBuffer";
        push @printFields, "dlRlcError";
      }
      push @printFields, ("rxPwrPucch", "rxPwrPusch", "sinr", "ulModulation", "ulMcs", "ulPrb", "ulNdf", "ulTbs", "sr", "bsr", "ulHarqInfo");
      if($settings{rlc})
      {
        push @printFields, "ulRlcBuffer";
        push @printFields, "ulRlcError";
      }
    }

    # Info fields
    if($settings{source})
    {
      push @printFields, "source";
    }
  }

  if($settings{csv})
  {
    if($settings{csvUseComma})
    {
      $fieldSeparator = ",";
    }
    else
    {
      $fieldSeparator = ";";
    }
  }

  foreach my $fieldName (@printFields)
  {
    if(!defined $fieldHeader{$fieldName} || !defined $fieldFormat{$fieldName})
    {
      print "Unknown column $fieldName\n";
      exit 1;
    }
    $printHeader .= "$fieldHeader{$fieldName}$fieldSeparator";
    $printFormat .= "$fieldFormat{$fieldName}$fieldSeparator";
    foreach my $source (split(/,/, $fieldSource{$fieldName}))
    {
      $sourceVisible{$source} = 1;
    }
  }
  
  if($settings{csv})
  {
    $printHeader =~ s/ //g;
    $printFormat =~ s/ //g;
    $printFormat =~ s/\%\-?\d+s/\%s/g;
  }
}


sub lookUpCellIdFromUeRef
{
  my ($ueRef) = @_;
  
  # cellId was not available in trace, try to find out cellId from ueRef
  if($ueRef > -1 && defined $ueIsInCellId{$ueRef})
  {
    return $ueIsInCellId{$ueRef};
  }

  return -1;
}


sub lookUpUeRefFromRnti
{
  my ($rnti) = @_;
  
  # cellId was not available in trace, try to find out cellId from ueRef
  if($rnti > -1 && defined $ueRefConnectedToRnti{$rnti})
  {
    return $ueRefConnectedToRnti{$rnti};
  }

  return -1;
}


sub flushData
{
  my($cellId, $sfn, $sf, $ueRef, $signalReceived) = @_;

  #if($settings{debug})
  #{
  #  print "flushData($cellId, $sfn, $sf, $ueRef, $signalReceived)\n";
  #}

  if(!defined $sourceVisible{$signalReceived} && $signalReceived ne "force")
  {
    # ignore this data, data anyway not visible
    return 0;
  }
  
  if($cellId > -1 && $ueRef > -1)
  {
    # save cellId for this ue
    $ueIsInCellId{$ueRef} = $cellId unless defined $ueIsInCellId{$ueRef};
  }
  
  if($cellId eq "" && $settings{debug}) {print "CellId not identified for signal $signalReceived\n";}

  if($settings{cellId} ne "" && $cellId ne "" && $settings{cellId} != $cellId)
  {
    # don't show data for this cell
    return 0;
  }
  
  if($settings{validUeRef} ne "" && $settings{validUeRef} !~ /,$ueRef,/)  #&& $ueRef != -1
  {
    # don't show data for this ue
    return 0;
  }

  if($signalReceived ne "force")
  {
    $seenCellIds{$cellId} = 1 unless defined $seenCellIds{$cellId};
    $seenUeRefs{$ueRef} = 1 unless defined $seenUeRefs{$ueRef};
  }
  
  my $sfnSf = ($accumulatedSfn + $sfn) * 10 + $sf;
  if($sfnSf < $subframeWindowStart)
  {
    # sfn has started over
    if($settings{debug})
    {
      print "DEBUG: [sfn $sfn, sf $sf] sfnSf less than window start ($sfnSf < $subframeWindowStart). Update accumulatedSfn.\n";
    }
    $accumulatedSfn += 1024;
    $sfnSf = ($accumulatedSfn + $sfn) * 10 + $sf;
  }

  if($settings{one} || $signalReceived eq "force" || $sfn eq "" || $sf eq "")
  {
    # flush all
    if(($sfn eq "" || $sf eq "") && $signalReceived ne "force" && $settings{debug}) {print "SFN or SF is missing for signal $signalReceived\n";}
    foreach my $sfnSf (sort {$a <=> $b} keys %savedSubframesSfn)
    {
      my %seenCell;
      foreach my $cellId2 (grep {!$seenCell{$_} ++} split(/,/, $savedSubframesCellId{$sfnSf}))
      {
        my %seenUe;
        foreach my $ueRef2 (grep {!$seenUe{$_} ++} split(/,/, $savedSubframesUeRef{$sfnSf}))
        {
          printSubframeData($cellId2, $sfnSf, $ueRef2);
        }
      }

      delete $savedSubframesSfn{$sfnSf};
      delete $savedSubframesSf{$sfnSf};
      delete $savedSubframesCellId{$sfnSf};
      delete $savedSubframesUeRef{$sfnSf};
    }
  }
  elsif($sfnSf < $subframeWindowStart || $sfnSf > $subframeWindowEnd)
  {
    # this subframe is outside the window of saved subframes. move window and then print any that now becomes outside the window
    my $oldSubframeWindowStart = $subframeWindowStart;
    my $oldSubframeWindowEnd = $subframeWindowEnd;
    $subframeWindowStart = $sfnSf - $subframeWindowStartBefore;
    $subframeWindowEnd = $subframeWindowStart + $subframeWindowSize;
    
    if($settings{debug})
    {
      print "DEBUG: [sfn $sfn, sf $sf] New sfnSf = $sfnSf. Window moved from [$oldSubframeWindowStart, $oldSubframeWindowEnd] to [$subframeWindowStart, $subframeWindowEnd]\n";
    }
    
    foreach my $sfnSf (sort {$a <=> $b} %savedSubframesSfn)
    {
      if($sfnSf < $subframeWindowStart || $sfnSf > $subframeWindowEnd)
      {
        my %seenCell;
        foreach my $cellId2 (grep {!$seenCell{$_} ++} split(/,/, $savedSubframesCellId{$sfnSf}))
        {
          my %seenUe;
          foreach my $ueRef2 (grep {!$seenUe{$_} ++} split(/,/, $savedSubframesUeRef{$sfnSf}))
          {
            printSubframeData($cellId2, $sfnSf, $ueRef2);
          }
        }

        delete $savedSubframesSfn{$sfnSf};
        delete $savedSubframesSf{$sfnSf};
        delete $savedSubframesCellId{$sfnSf};
        delete $savedSubframesUeRef{$sfnSf};
      }
    }
  }
  # else, not time yet to flush
  $savedSubframesSfn{$sfnSf} = $sfn unless defined $savedSubframesSfn{$sfnSf};
  $savedSubframesSf{$sfnSf} = $sf unless defined $savedSubframesSf{$sfnSf};
  $savedSubframesCellId{$sfnSf} .= "$cellId,";
  $savedSubframesUeRef{$sfnSf} .= "$ueRef,";

  $saved{$cellId, $sfn, $sf, $ueRef, 'source'} .= "$signalReceived ";
  if($cellId > -1) {$saved{$cellId, $sfn, $sf, $ueRef, 'cellId'} = $cellId;}
  if($ueRef != -1) {$saved{$cellId, $sfn, $sf, $ueRef, 'bbUeRef'} = $ueRef;}
  $traceTime =~ s/.*?\s(.*)/$1/;
  $saved{$cellId, $sfn, $sf, $ueRef, 'traceTime'} = $traceTime;

  return 1;
}


sub printAnyMissingSubframes
{
  my ($nextSfn, $nextSf) = @_;
  
  if($nextSfn < 0 || $nextSfn > 1023 || $nextSf < 0 || $nextSf > 9)
  {
    # incorrect sfn or sf
    return;
  }
  
  if($lastShownSfn == -1)
  {
    # before first row is shown, don't show any blank row
    return;
  }
  
  if($nextSfn == $lastShownSfn && $nextSf == $lastShownSf)
  {
    # will display one more line for this sfn and sf (example in multi-ue or with -si option)
    return;
  }
  
  $lastShownSf++;
  if($lastShownSf > 9)
  {
    $lastShownSf = 0;
    $lastShownSfn++;
    if($lastShownSfn > 1023)
    {
      $lastShownSfn = 0;
    }
  }

  while($lastShownSfn != $nextSfn || $lastShownSf != $nextSf)
  {
    $counter++;
    if(($headTitles == 0 && $counter == 1) || ($headTitles > 0 && ($counter % $headTitles) == 0))
    {
      print "$printHeader\n";
    }

    my @fields;
    foreach my $fieldName (@printFields)
    {
      if($fieldName eq "datasfn")
      {
        push @fields, $lastShownSfn;
      }
      elsif($fieldName eq "datasf")
      {
        push @fields, $lastShownSf;
      }
      else
      {
        push @fields, "";
      }
    }
    
    printf("$printFormat\n", @fields);
    
    $lastShownSf++;
    if($lastShownSf > 9)
    {
      $lastShownSf = 0;
      $lastShownSfn++;
      if($lastShownSfn > 1023)
      {
        $lastShownSfn = 0;
      }
    }
  }
}


sub printSubframeData
{  
  my($cellId, $sfnSf, $ueRef) = @_;

  my $sfn = $savedSubframesSfn{$sfnSf};
  my $sf = $savedSubframesSf{$sfnSf};

  if($ueRef != -1 && !defined $saved{$cellId, $sfn, $sf, $ueRef, "datasfn"}) {return;}
  
  if($settings{chart})
  {
    saveChartData($cellId, $sfn, $sf, $ueRef);
    return;
  }

  if($settings{showallsf} && !$settings{one})
  {
    printAnyMissingSubframes($sfn, $sf);
  }

  if($savedDlRlcAckNacksInWindow > 0) {$saved{$cellId, $sfn, $sf, $ueRef, 'dlRlcError'} = sprintf("%d\%", 100 * ($nrOfDlRlcErrorsInWindow / $savedDlRlcAckNacksInWindow));}
  if($savedUlRlcAckNacksInWindow > 0) {$saved{$cellId, $sfn, $sf, $ueRef, 'ulRlcError'} = sprintf("%d\%", 100 * ($nrOfUlRlcErrorsInWindow / $savedUlRlcAckNacksInWindow));}
  
  if(($headTitles == 0 && $counter == 0) || ($headTitles > 0 && ($counter % $headTitles) == 0))
  {
    if($settings{showaverage} && $counter > 1)
    {
      print "\nAverage values (for section above):\n";
      print "$printHeader\n";
      my $nrOfValues;
      foreach my $ueRef2 (sort {hex($a) <=> hex($b)} keys %averageSeenUeRefs)
      {
        my $value;
        my @fields;
        
        $averageNrOfValues{$ueRef2, "datasfn"} = "";
        $averageNrOfValues{$ueRef2, "datasf"} = "";

        foreach my $fieldName (@printFields)
        {
          $value = "";
          $nrOfValues = $averageNrOfValues{$ueRef2, $fieldName};
          if($fieldName eq "bbUeRef")
          {
	    $value = $ueRef2;
	  }
          elsif($nrOfValues > 0)
          {
	    if($averageDetails)
            {
              $value = sprintf("%.2f", ($averageValue{$ueRef2, $fieldName} / $nrOfValues));
            }
            else
            {
              $value = int (($averageValue{$ueRef2, $fieldName} / $nrOfValues) + 0.5);
            }
          }
          push @fields, $value;
        }

        printf("$printFormat\n", @fields);
      }
      %averageValue = ();
      %averageNrOfValues = ();
      %averageSeenUeRefs = ();
      print "\n";
    }
    print "$printHeader\n";
  }
  $counter++;
  
  my @fields;
  my $value;
  foreach my $fieldName (@printFields)
  {
    $value = $saved{$cellId, $sfn, $sf, $ueRef, $fieldName};
    $value =~ s/^\s*(.*?)\s*$/$1/;

    if($value =~ /^([0-9\-\.]+)\%?$/)
    {
      $averageValue{$ueRef, $fieldName} += $1;
      $averageNrOfValues{$ueRef, $fieldName}++;
      $averageSeenUeRefs{$ueRef} = 1 unless defined $averageSeenUeRefs{$ueRef};
    }
    
    if($useCommaAsDecimal)
    {
      $value =~ s/\./\,/;
    }

    push @fields, $value;
    delete $saved{$cellId, $sfn, $sf, $ueRef, $fieldName};
  }

  if($settings{debug})
  {
    printf("%08d", $sfnSf);
  }

  printf("$printFormat\n", @fields);
  
  if($sfn >= 0 && $sfn <= 1023 && $sf >= 0 && $sf <= 9)
  {
    $lastShownSfn = $sfn;
    $lastShownSf = $sf;
  }
}


# this functionality is experimental and therefore not mentioned in the help. if the -chart option is given
# it will be activated. for every second average and sum values for 10 UEs will be shown in csv and numerical
# format. to be used for example post-processing in Excel

sub saveChartData
{
  my($cellId, $sfn, $sf, $ueRef) = @_;

  if($sfn < 300 && $chartOkToStepTime == 1)
  {
    $chartOkToStepTime = 0;
    $chartTime++;

    if($chartTime == 1)
    {
      # first time, show header
      print "Seconds;";
    
      foreach my $fieldName (@printFields)
      {
        my $header = $fieldHeader{$fieldName};
        $header =~ s/ //g;
      
        my $ueNr = 1;
        while($ueNr < 11)
        {
          print "UE$ueNr $header sum;UE$ueNr $header average;";
          $ueNr++;
        }
      }
      print "\n";
    }
  
    # show line width values for ~1 second
    print "$chartTime;";
    my $average;
    foreach my $fieldName (@printFields)
    {
      my $ueNr = 1;
      while($ueNr < 11)
      {
        $average = $chartNrOfValues{$fieldName, $ueNr} > 0 ? sprintf("%.2f", $chartValue{$fieldName, $ueNr} / $chartNrOfValues{$fieldName, $ueNr}) : "";
        print "$chartValue{$fieldName, $ueNr};$average;";
        delete $chartValue{$fieldName, $ueNr};
        delete $chartNrOfValues{$fieldName, $ueNr};
        $ueNr++;
      }
    }
    print "\n";
  }
  elsif($sfn > 700)
  {
    $chartOkToStepTime = 1;
  }

  my $ueNr;
  if(defined $chartUeNrFromUeRef{$ueRef})
  {
    $ueNr = $chartUeNrFromUeRef{$ueRef};
  }
  else
  {
    $chartNextUeNr++;
    $chartUeNrFromUeRef{$ueRef} = $chartNextUeNr;
    $ueNr = $chartNextUeNr;
  }

  my @fields;
  my $value;
  foreach my $fieldName (@printFields)
  {
    if(defined $saved{$cellId, $sfn, $sf, $ueRef, $fieldName})
    {
      $value = $saved{$cellId, $sfn, $sf, $ueRef, $fieldName};
      $value =~ s/^\s*(.*?)\s*$/$1/;
      #print "$chartTime, $fieldName, $ueNr: $value\n";
      $chartValue{$fieldName, $ueNr} += $value;
      $chartNrOfValues{$fieldName, $ueNr}++;
      #$chartLastValue{$fieldName, $ueNr} = $value;
      delete $saved{$cellId, $sfn, $sf, $ueRef, $fieldName};
    }
    #elsif(defined $chartLastValue{$fieldName, $ueNr})
    #{
    #  $chartValue{$fieldName, $ueNr} = $chartLastValue{$fieldName, $ueNr};
    #}
  }
}


# ------------- Common functions -----------------------------------------------------------------


sub log10
{
  my $n = shift;
  if ($n == 0) {return "";}
  return log($n) / log(10);
}


sub countBitsIn32bitInt
{
  my $n = shift;
  my $tmp = $n - (($n >> 1) & 033333333333) - (($n >> 2) & 011111111111);
  return (($tmp + ($tmp >> 3)) & 030707070707) % 63;
  # MIT HAKMEM
}


sub decodeRadioTime
{
  my ($radioTime) = @_;
  
  if($radioTime =~ /0x(.+)(..)(..)(.)$/)
  {
    my ($bfnCoded, $hfnCoded, $bfCoded, $countCoded) = ($1, $2, $3, $4);
    my $latestBfn = hex($bfnCoded);
    my $latestSfn = $latestBfn & 0b001111111111;
    my $hfn = hex($hfnCoded);
    my $latestSf = sprintf("%.2f", $hfn / 15);
    my $bf = hex($bfCoded);
    my $count = hex($countCoded);
    return "bfn:$latestBfn, sfn:$latestSfn, sf:$latestSf, bf:$bf";
  }
  
  return "";
}


# ------------- Script arguments handling -----------------------------------------------------------------


# Copied from /vobs/erbs/ext/tools/perlLib/General/Shell.pm (to make the script completely stand-alone):


# Save script arguments. Typically code:
# saveArguments(@ARGV);
sub saveArguments
{
  @arguments = @_;
}

# Returns true if a flag is set, minimumLengthGiven is optional if flag can be
# given without writing the whole flag name
sub isFlagSet
{
  my ($flag, $minimumLengthGiven) = @_;
  $minimumLengthGiven = length $flag unless defined $minimumLengthGiven;
  
  my $argNr = 0;
  foreach my $argument (@arguments)
  {
    if (length $argument >= ($minimumLengthGiven + 1) &&
           $argument eq "-".(substr $flag, 0, ((length $argument) - 1)))
    {
      $argumentUsed[$argNr] = 1;
      return 1;
    }
    $argNr++;
  }

  return 0;
}

# Returns true if a flag is set, minimumLengthGiven is optional if flag can be
# given without writing the whole flag name. Will NOT update argumentUsed.
sub isFlagPresent
{
  my ($flag, $minimumLengthGiven) = @_;
  $minimumLengthGiven = length $flag unless defined $minimumLengthGiven;
  
  my $argNr = 0;
  foreach my $argument (@arguments)
  {
    if(length $argument >= ($minimumLengthGiven + 1) &&
       $argument eq "-".(substr $flag, 0, ((length $argument) - 1))){
      return 1;
    }
  }
  return 0;
}


# Returns the value for a flag, empty if not found
sub getFlagValue
{
  my ($flag, $minimumLengthGiven) = @_;
  $minimumLengthGiven = length $flag unless defined $minimumLengthGiven;

  my $lastArgument = "";  
  my $argNr = 0;
  foreach my $argument (@arguments)
  {
    if ($argument =~ /^-$flag(.+)/ &&
        !$argumentUsed[$argNr])
    {
      $argumentUsed[$argNr] = 1;
      return $1;
    }
    elsif (length $lastArgument >= ($minimumLengthGiven + 1) &&
           $lastArgument eq "-".(substr $flag, 0, ((length $lastArgument) - 1)) &&
           $argument !~ /^-/ &&
	   !$argumentUsed[$argNr] &&
	   !$argumentUsed[($argNr - 1)])
    {
      $argumentUsed[$argNr] = 1;
      $argumentUsed[($argNr - 1)] = 1;
      return $argument;
    }

    $lastArgument = $argument;
    $argNr++;
  }

  return "";
}


# Returns the next argument that is not a flag, empty if not found
sub getNextNonFlagArgument
{
  my $argNr = 0;
  foreach my $argument (@arguments)
  {
    if ($argument !~ /^-/ && !$argumentUsed[$argNr])
    {
      $argumentUsed[$argNr] = 1;
      return $argument;
    }
    $argNr++;
  }

  return "";
}


# Returns the next arguments that are not flags, empty if no one found
sub getNextNonFlagArguments
{
  my @allArguments;

  my $argNr = 0;
  foreach my $argument (@arguments)
  {
    if ($argument !~ /^-/ && !$argumentUsed[$argNr])
    {
      $argumentUsed[$argNr] = 1;
      push @allArguments, $argument;
    }
    $argNr++;
  }

  return join(" ", @allArguments);
}


# Returns true if all given arguments have been used
sub isAllArgumentsUsed
{
  my $argNr = 0;
  foreach my $argument (@arguments)
  {
    if (!$argumentUsed[$argNr])
    {
      return 0;
    }
    $argNr++;
  }
  return 1;
}


# Returns all arguments that were not used (typically faulty arguments)
sub getUnusedArguments
{
  my @allArguments;

  my $argNr = 0;
  foreach my $argument (@arguments)
  {
    if (!$argumentUsed[$argNr])
    {
      push @allArguments, $argument;
    }
    $argNr++;
  }

  return join(" ", @allArguments);
}


# ------------- Usage ------------------------------------------------------------------------------------


sub printTraces
{
  my $bold = "\e[1m";
  my $underlined = "\e[4m";
  my $reset = "\e[0;0m";

  print <<_END_;
$bold${underlined}Recommended traces$reset

Recommended to only activate the traces you need. Note! A lot of traces will be generated. If you save to a file,
the file will quickly be very large.

If you activate many of the traces at the same time it is very likely that you will have lost traces due to node
limitations.

If you need to capture as much as possible, without loosing data, save raw traces directly to a file (not using
"tee") and run post processing tools such as TET.pl, decode, ltng and bbfilter afterwards on the saved file.

$bold${underlined}Activate (L10B and later)$reset

# dlMode, dlPrb, dlNdf, nrOfUe (the -filter flag will make 0-allocations to not be traced)
mtd peek -ta dlMacCeBl -signal LPP_UP_DLMACPE_CI_DL_UE_ALLOC_IND -filter {(U16SIG)8,NEQ,(U16)0x00}

# rxPwrPucch, rxPwrPusch, dlHarqIndication, dlHarqProcessId, ri, cqi, ulPrb
# L12B and earlier: mtd peek -ta ulL1PeBl -signal LPP_UP_ULMACPE_CI_UL_L1_MEAS2_DL_IND
# L13A and later:
mtd peek -ta ulL1PeBl -signal LPP_UP_ULMACPE_CI_UL_L1_MEASRPRT2_DL_IND
mtd peek -ta ulL1PeBl -signal LPP_UP_ULMACPE_CI_UL_L1_HARQFDBK2_DL_IND

# phr, bsr, ulBler
mtd peek -ta ulMacCeBl -signal LPP_UP_ULMACPE_CI_UL_MAC_CTRL_INFO_IND

# dlMcs, dlModulation, dlTbs, dlAssignableBits, dlNdi, dlGinrOuterLoopAdj
lhsh gcpu01024 te e trace4 UpcDlMacCeFt_DL_SCHEDULER

# dlSeWeight, dlType
lhsh gcpu01024 te e trace4 UpcDlMacCeFt_DL_VALIDATION

# TDD: dlHarqProcessId, nBundled
mtd peek -ta dlMacCeBl -signal LPP_UP_ULMACPE_CI_DL_HARQ_ALLOC_IND

# ulPrb, ulTbs, ulModulation, ulNdf (the -filter flag will make 0-allocations to not be traced)
mtd peek -ta ulMacCeBl -signal LPP_UP_ULMACPE_CI_UL_UE_ALLOC_IND -filter {(U16SIG)7,NEQ,(U16)0x00}

# TDD: ulPrb, ulTbs, ulModulation, ulNdf, nBundled
mtd peek -ta ulL1PeBl -si LPP_UP_ULL1PE_EI_ALLOCATION_IND

# rxPwrPucch, rxPwrPusch, ulPrb, sinr, sr
# L12B and earlier: mtd peek -ta ulL1PeBl -signal LPP_UP_ULMACPE_CI_UL_L1_MEAS2_UL_IND
# L13A and later:
mtd peek -ta ulL1PeBl -signal LPP_UP_ULMACPE_CI_UL_L1_MEASRPRT2_UL_IND

# ulMcs, ulNdi, tpcPucch, tpcPusch
# L11B: lhsh gcpu01024 te e trace5 UpcUlMacCeFt_UL_SCHEDULER
# L12A:
lhsh gcpu01024 te e trace2 UpcUlMacCeFt_UL_SCHEDULER

# ulCrc
# L11B: lhsh gcpu00256 te e trace1 UpUlMacPeBl_Smac
# L12A: none / unknown

# averageUlGain, ulGainOuterLoopAdj
lhsh gcpu01024 te e trace5 UpcUlMacCeFt_UL_LINKADAPTATION
ue enable -allUe -allCell

# ulSeWeight
lhsh gcpu01024 te e trace4 UpcUlMacCeFt_UL_VALIDATION

# cell interferance power (generates a lot of traces):
lhsh gcpu00256 te e bus_send UpUlCellPeBlMaster_Ici 

# dlCandidatesBits (same as assignable bits in DL_SCHEDULER, the -filter flag will make 0-nrOfSessions to not be traced):
mtd peek -ta dlMacCeBl -signal LPP_UP_DLMACPE_CI_DL_UE_CANDIDATES_IND -filter {(U16SIG)6,NEQ,(U16)0x00}

# rlc ack/nack (only needed together with -rlc option, generates a lot of traces):
lhsh gcpu00768 te e all UpDlRlcPeFt_DRB_PDU
lhsh gcpu00256 te e all UpUlRlcPeFt_DRB_PDU

$bold${underlined}Deactivate$reset

mtd kill -ta dlMacCeBl -session -1
mtd kill -ta ulMacCeBl -session -1
mtd kill -ta dlL1PeBl -session -1
mtd kill -ta ulL1PeBl -session -1
lhsh gcpu00256 te default UpUlCellPeBlMaster_Ici
lhsh gcpu00256 te default UpUlMacPeBl_Smac
lhsh gcpu01024 te default UpcDlMacCeFt_DL_SCHEDULER
lhsh gcpu01024 te default UpcDlMacCeFt_DL_VALIDATION
lhsh gcpu01024 te default UpcUlMacCeFt_UL_SCHEDULER
lhsh gcpu01024 te default UpcUlMacCeFt_UL_LINKADAPTATION
lhsh gcpu00256 te default UpUlRlcPeFt_DRB_PDU
lhsh gcpu00768 te default UpDlRlcPeFt_DRB_PDU

$bold${underlined}How to use hicap tracing$reset

1. Setup target monitor (only needed first time):
secmode -m u
tm -udp <ip-address terouter> 
tm -attach 2 000100 gcpu00256 gcpu00512 gcpu00768 gcpu01024 BXP_0_1 BXP_1_1 BXP_2_1
tm -save 

2. Activate hicap (currently you need to run this after each node restart):
hicap enable -ip <ip address terouter> -udp 33079 -dscp 0

3. Run teviewer
only cpp traces: teviewer --monitor=<ip address gigabit ipinterface=1> 
only baseband traces:  teviewer --monitor=<ip address gigabit ipinterface=2> 
all traces: teviewer --monitor=<ip address gigabit ipinterface=1>,<ip address gigabit ipinterface=2> 
_END_
}


sub printUsage
{
  my $bold = "\e[1m";
  my $underlined = "\e[4m";
  my $reset = "\e[0;0m";

  #  -k/eep               Keep measured values for a while (do not only display when value is received)
  #  -sf                  Show SF and SFN columns that are corresponding to the data that is presented. Note!
  #                       Unless the -one option is used the value might be overwritten by some other data on the
  #                       same row (if you have several traces turned on).

  print <<_END_;
bbfilter. Version: $versionNumber

Filters out interesting baseband data from the trace log and present it in a nice way. Useful for real-time
tracing. The trace input must have been passed through "decode" and for "decode" to work you must have passed the
log through "TET.pl", see examples below.

$bold${underlined}Settings:$reset
  -bw <mhz>            Set DL bandwidth. Needed for correct PRB calculation. Default is 10 MHZ.
  
$bold${underlined}How to present data:$reset
  -o/ne                One source of information (one signal or one trace line) per row. Useful together with
                       -source to make sure from which trace the measured value is coming from and what data
                       that is consistent with each other.
  -csv                 Output in csv-format. Fields are separated with ; (Sweden and some other European contries)
  -csv2                Output in csv-format. Fields are separated with , (USA/UK and other contries)
  -s/eparator <char>   Change column separator from default character $fieldSeparator to <char>

$bold${underlined}What to display:$reset
  -c/ell <id>          Show only data related to cell <id>.
  -ue "<id1>,<id2>,.." Show only data related to ues with any of the listed <id>. <id> should be given in hex
                       format (without 0x in the beginning).
  -a/ll                Show all possible columns.
  -dl                  Show all DL fields. Will hide UL fields, unless -ul is also given. Default the most
                       important DL fields are shown.
  -ul                  Show all UL fields. Will hide DL fields, unless -dl is also given. Default the most
                       important UL fields are shown.
  -bfn/register        Show bfn register value. Can be used to easily find corresponding trace in the trace
                       file. Default this is hidden.
  -f/ilter "<filter>"  Show also traces matching <filter>, case-sensitive. Separate strings with |. Can be used
                       to show for example ERROR or ABNORMAL traces.
  -rlc                 Show RLC buffer status (pdu size in bytes) and approx. error rate. The error rate is very
                       simple and compares number of NACKs vs ACKs on a sliding window with $rlcWindowSize positions
                       Note! This field can not separate data from different cells from each other.
  -si/b                Show paging and system information data (paging rnti=65534, system information rnti=65535)
  -so/urce             Show the source of the data
  -show "<list>"       Specify exactly which columns to show. Use -columns for instructions.
  -sf                  Show all subframes, even if no data will be presented for that subframe.
  -time                Show trace time.
  -av/erage            Show average value per UE for the last section of data (last 40 rows of data unless changed
                       with the -head flag)
  -details             Show average values as float values with 2 decimals.
  -head <i>            Show table column head titles and average values every <i> row, default is 40.
  -rx/pwr              Show rx power also in DTX situation
  -num/erical          Only show numerical values where possible (e.g. "1" instead of "Y", 3 instead of "MIMO" etc)

$bold${underlined}Other:$reset
  -help                Show this help
  -t/races             List recommended traces to activate and how to use hicap tracing
  -col/umns            Show descriptions for all columns and how to use the -show option
  -e/very <n>          After every <n> trace from stdin show one or more traces (define number of traces with the
                       -pass option. Needed for real-time tracing. See instructions below. 
  -p/ass <n>           Set number of traces to pass through when the criteria set with the -every option is
                       fulfilled. Default is 1. 

$bold${underlined}Examples:$reset

From trace log file:   cat trace.log | TET.pl | decode | bbfilter

                       For large log files it is recommended is to first send the trace log through the TET.pl
                       and decode and save it to a new file. And then send the new file through "bbfilter".
  
Real-time tracing:     teviewer --monitor=172.24.1.246 | bbfilter -every 100 | TET.pl | decode | bbfilter

                       Using the "bbfilter -every <n>" directly after the trace monitor will only let every <n>
                       trace through and to be processed by the time comsuming TET.pl, decode, bbfilter scripts
                       and the terminal window. Modify <n> depending on the speed of the trace server. To make
                       sure you see the tracing in live speed the sfn number should increase with 100 every second.
                       If less, you need to increase <n> to a higher number.

For best performance, use hicap traces. See -traces for more instructions

For descriptions of all columns, see -columns
_END_
}
